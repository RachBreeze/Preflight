{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/Preflight/Backoffice/app.js","src/Preflight/Backoffice/components/_componentsModule.js","src/Preflight/Backoffice/components/card.component.js","src/Preflight/Backoffice/components/progress.directive.js","src/Preflight/Backoffice/components/resultintro.component.js","src/Preflight/Backoffice/components/stateicon.component.js","src/Preflight/Backoffice/controllers/_controllersModule.js","src/Preflight/Backoffice/controllers/notification.controller.js","src/Preflight/Backoffice/controllers/preflight.controller.js","src/Preflight/Backoffice/controllers/settings.controller.js","src/Preflight/Backoffice/interceptors/preflight.save.interceptor.js","src/Preflight/Backoffice/plugins/_pluginsModule.js","src/Preflight/Backoffice/plugins/linkhealth.result.component.js","src/Preflight/Backoffice/plugins/readability.plugin.controller.js","src/Preflight/Backoffice/resources/_servicesModule.js","src/Preflight/Backoffice/resources/preflight.hub.js","src/Preflight/Backoffice/resources/preflight.service.js"],"names":[],"mappings":"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","file":"preflight.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","﻿import { ServicesModule } from './resources/_servicesModule';\r\nimport { ComponentsModule } from './components/_componentsModule';\r\nimport { ControllersModule } from './controllers/_controllersModule';\r\nimport { PluginsModule } from './plugins/_pluginsModule';\r\n\r\nconst name = 'preflight';\r\n\r\nangular.module(name, [\r\n    ServicesModule,\r\n    ComponentsModule,\r\n    ControllersModule,\r\n    PluginsModule,\r\n]);\r\n\r\nangular.module('umbraco').requires.push(name);","﻿import { CardComponent } from './card.component';\r\nimport { ProgressCircleDirective } from './progress.directive';\r\nimport { ResultIntroComponent } from './resultintro.component';\r\nimport { StateIconComponent } from './stateicon.component';\r\n\r\nexport const ComponentsModule = angular\r\n    .module('preflight.components', [])\r\n    .component(CardComponent.name, CardComponent)\r\n    .component(ResultIntroComponent.name, ResultIntroComponent)\r\n    .component(StateIconComponent.name, StateIconComponent)\r\n    .directive(ProgressCircleDirective.directiveName, () => new ProgressCircleDirective())\r\n    .name;","﻿class Card {\r\n\r\n    template = `\r\n        <div class=\"card {{ ::$ctrl.cardClass }}\">\r\n            <span class=\"card-score {{ ::$ctrl.cardScoreClass }}\" ng-bind=\"::$ctrl.score\"></span>\r\n            <span class=\"card-title\">\r\n                {{ ::$ctrl.title }}<br />\r\n                {{ ::$ctrl.subtitle }}\r\n            </span>\r\n        </div>`;\r\n\r\n    cardClass = 'pass';\r\n    cardScoreClass = 'pass-color';\r\n\r\n    localizationService;\r\n\r\n    constructor(localizationService) {\r\n        this.localizationService = localizationService;\r\n    }\r\n\r\n    $onInit() {\r\n\r\n        if (this.failed) {\r\n            this.cardClass = 'fail';\r\n            this.cardScoreClass = 'fail-color';\r\n        }\r\n\r\n        if (this.title[0] === '@') {\r\n            localizationService.localize(this.title, this.tokens)\r\n                .then(localizedTitle => this.title = localizedTitle);\r\n        }\r\n\r\n        if (this.subtitle[0] === '@') {\r\n            this.localizationService.localize(this.subtitle, this.tokens)\r\n                .then(localizedSubtitle => this.subtitle = localizedSubtitle);\r\n        }\r\n    };\r\n}\r\n\r\nexport const CardComponent = {\r\n    transclude: true,\r\n    name: 'card',\r\n    bindings: {\r\n        title: '@?',\r\n        subtitle: '@?',\r\n        failed: '<',\r\n        score: '<',\r\n        tokens: '<'\r\n    },\r\n    template: Card.template,\r\n    controller: Card\r\n};\r\n","﻿export class ProgressCircleDirective {\n\n    static directiveName = \"progressCircle\";\n\n    restrict = 'E';\n    replace = true;\n    scope = {\n        size: '@?',\n        percentage: '=',\n        done: '@',\n        foreground: '@',\n        background: '@'\n    };\n\n    template = `\n        <div class=\"umb-progress-circle preflight-progress\" ng-style=\"{'width': size, 'height': size }\"> {{ percent }}\n            <svg class=\"umb-progress-circle__view-box\" viewBox=\"0 0 33.83098862 33.83098862\"> \n                <circle class=\"umb-progress-circle__highlight--{{ background }}\" cx=\"16.91549431\" cy=\"16.91549431\" r=\"15.91549431\" fill=\"none\" stroke-width=\".5\"></circle>\n                <circle class=\"umb-progress-circle__highlight umb-progress-circle__highlight--{{ foreground }}\" \n                    cx=\"16.91549431\" cy=\"16.91549431\" r=\"15.91549431\" stroke-linecap=\"round\" fill=\"none\" stroke-width=\"2\" stroke-dasharray=\"{{ dashArray }}\"></circle> \n            </svg> \n            <div ng-style=\"{'font-size': percentageSize}\" class=\"umb-progress-circle__percentage\">\n                {{ label }}\n                <small>pass rate</small>                \n            </div>\n        </div>`;\n\n    link(scope, element) {\n        function onInit() {\n\n            // making sure we get the right numbers\n            let percent = Math.round(scope.percentage);\n            percent = percent > 100 ? 100 : percent || 0;\n\n            // calculating the circle's highlight\n            const r = element.find('.umb-progress-circle__highlight').attr('r');\n            const pathLength = r * Math.PI * 2 * percent / 100;\n\n            // Full circle length\n            scope.dashArray = `${pathLength},100`;\n\n            // set font size\n            scope.percentageSize = scope.size * 0.3 + 'px';\n\n            // use rounded percentage\n            scope.label = `${percent}%`;\n        }\n\n        const watcher = scope.$watch('percentage', onInit);\n\n        scope.$on('$destroy', watcher());\n    }\n}\n","﻿class ResultIntro {\r\n    /**\r\n     * Directive used to render the heading for a plugin in the results view\r\n     * Send a stringified array as the tokens attribute to replace %0%, %1% .. %n% in the localized string\r\n     */\r\n\r\n    static template = `\r\n        <h5 ng-bind=\"::$ctrl.heading\"></h5>\r\n        <span ng-if=\"$ctrl.pass\" ng-bind=\"::$ctrl.passText\"></span>`;\r\n\r\n    localizationService;\r\n\r\n    constructor(localizationService) {\r\n        this.localizationService = localizationService;\r\n    }\r\n\r\n    $onInit() {\r\n        if (this.passText[0] === '@') {\r\n            this.localizationService.localize(this.passText, this.tokens)\r\n                .then(localizedPassText => this.passText = localizedPassText);\r\n        }\r\n\r\n        if (this.heading[0] === '@') {\r\n            this.localizationService.localize(this.heading, this.tokens)\r\n                .then(localizedHeading => this.heading = localizedHeading);\r\n        }\r\n    };\r\n}\r\n\r\nexport const ResultIntroComponent = {\r\n    transclude: true,\r\n    name: 'resultIntro',\r\n    bindings: {\r\n        tokens: '<',\r\n        passText: '@?',\r\n        heading: '@?',\r\n        pass: '<'\r\n    },\r\n    template: ResultIntro.template,\r\n    controller: ResultIntro\r\n};","﻿class StateIcon {\r\n\r\n    static template = `\r\n        <div class=\"state-icon {{ ::$ctrl.className }}\">\r\n            <i class=\"icon icon-{{ ::$ctrl.icon }}\"></i>\r\n        </div>`;\r\n\r\n    icon = 'power';\r\n    className = 'disabled';\r\n\r\n    $onInit() {\r\n        if (!this.disabled) {\r\n            this.icon = this.failed ? 'delete' : 'check';\r\n            this.className = this.failed ? 'fail' : 'pass';\r\n        }\r\n    };\r\n}\r\n\r\nexport const StateIconComponent = {\r\n    transclude: true,\r\n    name: 'stateIcon',\r\n    bindings: {\r\n        failed: '<',\r\n        disabled: '<'\r\n    },\r\n    template: StateIcon.template,\r\n    controller: StateIcon,\r\n};\r\n","﻿import { PreflightController } from './preflight.controller';\r\nimport { NotificationController } from './notification.controller';\r\nimport { SettingsController } from './settings.controller';\r\n\r\nexport const ControllersModule = angular\r\n    .module('preflight.controllers', [])\r\n    .controller(PreflightController.controllerName, PreflightController)\r\n    .controller(NotificationController.controllerName, NotificationController)\r\n    .controller(SettingsController.controllerName, SettingsController)\r\n    .name;","﻿export class NotificationController {\r\n\r\n    static controllerName = 'preflight.notification.controller';\r\n\r\n    $rootScope;\r\n    notificationsService;\r\n    editorState;\r\n\r\n    saveCancelled;\r\n\r\n    constructor($rootScope, notificationsService, editorState) {\r\n        this.$rootScope = $rootScope;\r\n        this.notificationsService = notificationsService;\r\n        this.editorState = editorState;\r\n\r\n        this.saveCancelled = +notificationsService.current[0].args.saveCancelled === 1;\r\n    }\r\n\r\n    switch = n => {\r\n        this.$rootScope.$emit('showPreflight', { nodeId: this.editorState.current.id });\r\n        this.discard(n);\r\n    };\r\n\r\n    discard = n => {\r\n        this.notificationsService.remove(n);\r\n    };\r\n}\r\n","﻿export class PreflightController {\r\n\r\n    static controllerName = 'preflight.controller';\r\n\r\n    $scope;\r\n    $rootScope;\r\n    $element;\r\n    $timeout;\r\n    editorState;\r\n    preflightService;\r\n    preflightHub;\r\n\r\n    dirtyHashes = {};\r\n    validPropTypes;\r\n    propsBeingChecked = [];\r\n    propertiesToTrack = [];\r\n    dirtyProps = [];\r\n\r\n    results = {\r\n        properties: []\r\n    };\r\n\r\n    noTests = false;\r\n    percentageDone = 20;\r\n    progressStep = 0;\r\n\r\n    constructor($scope, $rootScope, $element, $timeout, editorState, preflightService, preflightHub) {\r\n        this.$scope = $scope;\r\n        this.$rootScope = $rootScope;\r\n        this.$element = $element;\r\n        this.$timeout = $timeout;\r\n        this.editorState = editorState;\r\n        this.preflightService = preflightService;\r\n        this.preflightHub = preflightHub;\r\n\r\n        this.validPropTypes = Umbraco.Sys.ServerVariables.Preflight.PropertyTypesToCheck;\r\n\r\n        this.$scope.model.badge = {\r\n            type: 'info'\r\n        };\r\n\r\n        $rootScope.$on('app.tabChange', (e, data) => {\r\n            if (data.alias === 'preflight') {\r\n                // collapse open nc controls, timeouts prevent $apply errors\r\n                for (let openNc of document.querySelectorAll('.umb-nested-content__item--active .umb-nested-content__header-bar')) {\r\n                    $timeout(() => openNc.click());\r\n                }\r\n\r\n                $timeout(() => {\r\n                    this.checkDirty();\r\n                    this.setBadgeCount();\r\n                });\r\n            }\r\n        });\r\n\r\n        $rootScope.$on('showPreflight', (event, data) => {\r\n            if (data.nodeId === $scope.content.id) {\r\n                // needs to find app closest to current scope\r\n                const appLink = $element.closest('form').find('[data-element=\"sub-view-preflight\"]');\r\n\r\n                if (appLink) {\r\n                    appLink.click();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * @param {any} arr\r\n     */\r\n    joinList = arr => {\r\n        let outStr;\r\n        if (arr.length === 1) {\r\n            outStr = arr[0];\r\n        } else if (arr.length === 2) {\r\n            outStr = arr.join(' and ');\r\n        } else if (arr.length > 2) {\r\n            outStr = arr.slice(0, -1).join(', ') + ', and ' + arr.slice(-1);\r\n        }\r\n\r\n        return outStr;\r\n    };\r\n\r\n\r\n    /**\r\n     * Convert a string to a hash for storage and comparison.\r\n     * @param {string} s - the string to hashify\r\n     * @returns {int} the generated hash\r\n     */\r\n    getHash = s => s ? s.split('').reduce((a, b) => {\r\n        a = (a << 5) - a + b.charCodeAt(0);\r\n        return a & a;\r\n    }, 0) : 1;\r\n\r\n\r\n    /**\r\n     * Get property by alias from the current variant\r\n     * @param {any} alias\r\n     */\r\n    getProperty = alias => {\r\n        for (let tab of this.editorState.current.variants.find(x => x.active).tabs) {\r\n            for (let prop of tab.properties) {\r\n                if (prop.alias === alias) {\r\n                    return prop;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * \r\n     * @param {any} editor\r\n     */\r\n    onComplete = () => {\r\n        // it's possible no tests ran, in which case results won't exist\r\n        this.noTests = this.results.properties.every(x => !x.plugins.length);\r\n        if (this.noTests) {\r\n            this.$scope.model.badge = undefined;\r\n        }\r\n\r\n        for (let p of this.results.properties) {\r\n            p.disabled = p.failedCount === -1;\r\n        }\r\n\r\n        this.showSuccessMessage = !this.results.failed && !this.noTests;\r\n        this.done = true;\r\n    };\r\n\r\n    /**\r\n     * Is the editor param Umbraco.Grid or Umbraco.NestedContent?\r\n     * @param {any} editor\r\n     */\r\n    isJsonProperty = editor => editor === 'Umbraco.Grid' || editor === 'Umbraco.NestedContent';\r\n\r\n\r\n    /**\r\n     * Updates the badge in the header with the number of failed tests\r\n     */\r\n    setBadgeCount = pending => {\r\n        if (pending) {\r\n            this.$scope.model.badge = {\r\n                type: 'warning'\r\n            };\r\n            return;\r\n        }\r\n\r\n        if (this.results && this.results.failedCount > 0) {\r\n            this.$scope.model.badge = {\r\n                count: this.results.failedCount,\r\n                type: 'alert'\r\n            };\r\n        } else {\r\n            this.$scope.model.badge = {\r\n                type: 'success icon-'\r\n            };\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * Updates the property set with the new value, and removes any temporary property from that set\r\n     * @param {object} data - a response model item returned via the signalr hub\r\n     */\r\n    rebindResult = data => {\r\n\r\n        let newProp = true;\r\n        let totalTestsRun = 0;\r\n        let existingProp = this.results.properties.find(x => x.label === data.label);\r\n\r\n        if (existingProp) {\r\n            existingProp = Object.assign(existingProp, data);\r\n            existingProp.loading = false;\r\n            newProp = false;\r\n        }\r\n\r\n        // a new property will have a temporary placeholder - remove it\r\n        // _temp ensures grid with multiple editors only removes the correct temp entry\r\n        if (newProp && !data.remove && data.failedCount !== -1) {\r\n            const tempIndex = this.results.properties.findIndex(p => p.name === `${data.name}_temp`);\r\n            if (tempIndex !== -1) {\r\n                this.results.properties.splice(tempIndex, 1);\r\n            }\r\n            this.results.properties.push(data);\r\n        }\r\n\r\n        this.results.properties = this.results.properties.filter(x => x.remove === false);\r\n        this.results.properties = this.results.properties.filter(x => x.failedCount > -1);\r\n\r\n        this.results.failedCount = this.results.properties.reduce((prev, cur) => {\r\n            totalTestsRun += cur.totalTests;\r\n            return prev + cur.failedCount;\r\n        }, 0);\r\n\r\n        this.results.failed = this.results.failedCount > 0;\r\n        this.propsBeingCheckedStr = this.joinList(this.propsBeingChecked.splice(this.propsBeingChecked.indexOf(data.name), 1));\r\n        this.percentageFailed = (totalTestsRun - this.results.failedCount) / totalTestsRun * 100;\r\n    };\r\n\r\n\r\n    /**\r\n     * Finds dirty content properties, checks the type and builds a collection of simple models for posting to the preflight checkdirty endpoint\r\n     * Also generates and stores a hash of the property value for comparison on subsequent calls, to prevent re-fetching unchanged data\r\n     */\r\n    checkDirty = () => {\r\n\r\n        this.dirtyProps = [];\r\n        this.hasDirty = false;\r\n\r\n        for (let prop of this.propertiesToTrack) {\r\n            let currentValue = this.getProperty(prop.alias).value;\r\n            currentValue = this.isJsonProperty(prop.editor) ? JSON.stringify(currentValue) : currentValue;\r\n\r\n            const hash = this.getHash(currentValue);\r\n\r\n            if (this.dirtyHashes[prop.label] && this.dirtyHashes[prop.label] !== hash) {\r\n\r\n                this.dirtyProps.push({\r\n                    name: prop.label,\r\n                    value: currentValue,\r\n                    editor: prop.editor\r\n                });\r\n\r\n                this.dirtyHashes[prop.label] = hash;\r\n                this.hasDirty = true;\r\n            } else if (!this.dirtyHashes[prop.label]) {\r\n                this.dirtyHashes[prop.label] = hash;\r\n            }\r\n        }\r\n\r\n        // if dirty properties exist, create a simple model for each and send the lot off for checking\r\n        // response comes via the signalr hub so is not handled here\r\n        if (this.hasDirty) {\r\n            this.$timeout(() => {\r\n\r\n                this.dirtyProps.forEach(prop => {\r\n                    for (let existing of this.results.properties.filter(p => p.name === prop.name)) {\r\n                        if (existing) {\r\n                            existing.open = false;\r\n                            existing.failedCount = -1;\r\n                        } else {\r\n                            // generate new placeholder for pending results - this is removed when the response is returned\r\n                            this.results.properties.push({\r\n                                label: prop.name,\r\n                                open: false,\r\n                                failed: false,\r\n                                failedCount: -1,\r\n                                name: `${prop.name}_temp`\r\n                            });\r\n                        }\r\n                    }\r\n\r\n                    this.propsBeingChecked.push(prop.name);\r\n                });\r\n\r\n                this.propsBeingCheckedStr = this.joinList(this.propsBeingChecked);\r\n\r\n                const payload = {\r\n                    properties: this.dirtyProps,\r\n                    nodeId: this.editorState.current.id\r\n                };\r\n\r\n                this.setBadgeCount(true);\r\n                this.done = false;\r\n\r\n                this.preflightService.checkDirty(payload);\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Initiates the signalr hub for returning test results\r\n     */\r\n    initSignalR = () => {\r\n\r\n        this.preflightHub.initHub(hub => {\r\n\r\n            hub.on('preflightTest',\r\n                e => {\r\n                    this.rebindResult(e);\r\n                    this.setBadgeCount();\r\n                });\r\n\r\n            hub.on('preflightComplete',\r\n                () => this.onComplete()\r\n            );\r\n\r\n            hub.start(e => {\r\n                /**\r\n                 * Check all properties when the controller loads. Won't re-run when changing between apps\r\n                 * but needs to happen after the hub loads\r\n                 */\r\n                this.$timeout(() => {\r\n                    this.setBadgeCount(true);\r\n                    this.checkDirty(); // builds initial hash array, but won't run anything\r\n                    this.preflightService.check(this.editorState.current.id);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    $onInit() {\r\n        const activeVariant = this.editorState.current.variants.find(x => x.active);\r\n        if (activeVariant) {\r\n            activeVariant.tabs.forEach(x => {\r\n                this.propertiesToTrack = this.propertiesToTrack.concat(x.properties.map(x => {\r\n                    if (this.validPropTypes.includes(x.editor)) {\r\n                        return {\r\n                            editor: x.editor,\r\n                            alias: x.alias,\r\n                            label: x.label\r\n                        };\r\n                    }\r\n                })).filter(x => x);\r\n            });\r\n\r\n            // array will have length, as app is only sent on types with testable properties\r\n            if (this.propertiesToTrack.length) {\r\n                this.initSignalR();\r\n            }\r\n        }\r\n    }\r\n}\r\n","﻿export class SettingsController {\r\n\r\n    static controllerName = 'preflight.settings.controller';\r\n\r\n    $scope;\r\n    notificationsService;\r\n    preflightService;\r\n\r\n    constructor($scope, notificationsService, preflightService) {\r\n        this.$scope = $scope;\r\n        this.notificationsService = notificationsService;\r\n        this.preflightService = preflightService;\r\n    }\r\n\r\n    watchTestableProperties = () => {\r\n        let propertiesToModify = this.settings.filter(x => x.alias.indexOf('PropertiesToTest') !== -1 && x.alias !== 'propertiesToTest');\r\n        this.$scope.$watch(() => this.settings.find(x => x.alias === 'propertiesToTest').value, newVal => {\r\n            if (newVal) {\r\n                for (let prop of propertiesToModify) {\r\n                    // use the prop alias to find the checkbox set\r\n                    for (let checkbox of document.querySelectorAll(`umb-checkbox[name*=\"${prop.alias}\"]`)) {\r\n                        checkbox.querySelector('.umb-form-check').classList[newVal.indexOf(checkbox.getAttribute('value')) === -1 ? 'add' : 'remove']('pf-disabled');\r\n                    }\r\n                }\r\n            }\r\n        }, true);\r\n    };\r\n\r\n    $onInit() {\r\n        this.preflightService.getSettings()\r\n            .then(resp => {\r\n                this.settings = resp.data.settings;\r\n                this.tabs = resp.data.tabs;\r\n\r\n                this.settings.forEach(v => {\r\n                    if (v.view.indexOf('slider') !== -1) {\r\n                        v.config = {\r\n                            handle: 'round',\r\n                            initVal1: v.alias === 'longWordSyllables' ? 5 : 65,\r\n                            maxVal: v.alias === 'longWordSyllables' ? 10 : 100,\r\n                            minVal: 0,\r\n                            orientation: 'horizontal',\r\n                            step: 1,\r\n                            tooltip: 'always',\r\n                            tooltipPosition: 'bottom',\r\n                        };\r\n                    } else if (v.view.indexOf('multipletextbox') !== -1) {\r\n\r\n                        v.value = v.value.split(',').map(val => {\r\n                            return { value: val };\r\n                        }).sort((a, b) => a < b);\r\n\r\n                        v.config = {\r\n                            min: 0,\r\n                            max: 0\r\n                        };\r\n\r\n                        v.validation = {};\r\n                    } else if (v.view.indexOf('checkboxlist') !== -1) {\r\n\r\n                        v.value = v.value.split(',');\r\n\r\n                        v.config = {\r\n                            items: v.prevalues\r\n                        };\r\n                    }\r\n                });\r\n\r\n                this.watchTestableProperties();\r\n            });\r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    saveSettings = () => {\r\n\r\n        const min = parseInt(this.settings.filter(x => x.alias === 'readabilityTargetMinimum')[0].value);\r\n        const max = parseInt(this.settings.filter(x => x.alias === 'readabilityTargetMaximum')[0].value);\r\n\r\n        if (min < max) {\r\n\r\n            if (min + 10 > max) {\r\n                this.notificationsService.warning('WARNING', 'Readability range is narrow');\r\n            }\r\n\r\n            // need to transform multitextbox values without digest\r\n            // so must be a new object, not a reference\r\n            const settingsToSave = JSON.parse(JSON.stringify(this.settings));\r\n\r\n            settingsToSave.forEach(v => {\r\n                if (v.view.indexOf('multipletextbox') !== -1) {\r\n                    v.value = v.value.map(o => o.value).join(',');\r\n                } else if (v.view.indexOf('checkboxlist') !== -1) {\r\n                    v.value = v.value.join(',');\r\n                }\r\n            });\r\n\r\n            this.preflightService.saveSettings(settingsToSave, this.tabs)\r\n                .then(resp => {\r\n                    resp.data\r\n                        ? this.notificationsService.success('SUCCESS', 'Settings updated')\r\n                        : this.notificationsService.error('ERROR', 'Unable to save settings');\r\n\r\n                    // reset dashboard form state\r\n                    this.$scope.preflightSettingsForm.$setPristine();\r\n                });\r\n        }\r\n        else {\r\n            this.notificationsService.error('ERROR',\r\n                'Unable to save settings - readability minimum cannot be greater than readability maximum');\r\n        }\r\n    }\r\n}","﻿(() => {\r\n\r\n    const postSaveUrl = '/umbracoapi/content/postsave';\r\n\r\n    function interceptor(notificationsService, $q, $injector) {\r\n\r\n        const checkGroup = userGroupOptInOut => {\r\n            // use the stored value to get the corresponding key from the setting's prevalues (which is value,key paring of all groups)\r\n            var enabledGroups = userGroupOptInOut.prevalues.filter(x => userGroupOptInOut.value.includes(x.value)).map(x => x.key);\r\n\r\n            $injector.invoke(['authResource', authResource => {\r\n                authResource.getCurrentUser()\r\n                    .then(currentUser => {\r\n                        if (enabledGroups.some(x => currentUser.userGroups.includes(x))) {\r\n                            notificationsService.add({\r\n                                key: 'preflight_notice',\r\n                                view: `${Umbraco.Sys.ServerVariables.Preflight.PluginPath}/views/warning.notification.html`\r\n                            });\r\n                        }\r\n                    });\r\n            }]);\r\n        };\r\n\r\n        return {\r\n            request: request => {\r\n                if (request.url.toLowerCase().indexOf(postSaveUrl) !== -1) {\r\n                    $injector.invoke(['preflightService', s => {\r\n                        s.getSettings()\r\n                            .then(resp => {                   \r\n                                const settings = resp.data.settings;\r\n                                const runOnSave = settings.find(x => x.alias === 'runPreflightOnSave'); \r\n                                if (runOnSave && runOnSave.value === '1') {\r\n                                    const userGroupOptInOut = settings.find(x => x.alias === 'userGroupOptInOut');\r\n                                    checkGroup(userGroupOptInOut);\r\n                                }\r\n                            });\r\n                    }]);\r\n                }\r\n\r\n                return request || $q.when(request);\r\n            },\r\n            response: response => {\r\n                try {\r\n                    if (response.config.url.toLowerCase().indexOf(postSaveUrl) !== -1) {\r\n\r\n                        const index = notificationsService.current.map(c => c.key === 'preflight_notice')\r\n                            .indexOf(true);\r\n\r\n                        if (index !== -1) {\r\n                            notificationsService.remove(index);\r\n                        }\r\n\r\n                        if (response.data.notifications) {\r\n                            \r\n                            const notification = response.data.notifications.filter(f => f.header === Umbraco.Sys.ServerVariables.Preflight.ContentFailedChecks)[0];\r\n\r\n                            if (notification) {\r\n                                response.data.notifications = [];\r\n\r\n                                notificationsService.add({\r\n                                    view: `${Umbraco.Sys.ServerVariables.Preflight.PluginPath}/views/failed.notification.html`,\r\n                                    args: { saveCancelled: notification.message.indexOf('_true') !== -1 }\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                catch (err) {\r\n                    console.log(err.message);\r\n                }\r\n\r\n                return response || $q.when(response);\r\n            }\r\n        };\r\n    }\r\n\r\n    angular.module('preflight')\r\n        .factory('preflight.save.interceptor', ['notificationsService', '$q', '$injector', interceptor])\r\n        .config($httpProvider => $httpProvider.interceptors.push('preflight.save.interceptor'));\r\n\r\n})();","﻿import { LinkHealthResultComponent } from './linkhealth.result.component';\r\nimport { ReadabilityPluginController } from './readability.plugin.controller';\r\n\r\nexport const PluginsModule = angular\r\n    .module('preflight.plugins', [])\r\n    .component(LinkHealthResultComponent.name, LinkHealthResultComponent)\r\n    .controller(ReadabilityPluginController.controllerName, ReadabilityPluginController)\r\n    .name;","﻿export const LinkHealthResultComponent = {\r\n    name: 'linkHealthResult',\r\n    transclude: true,\r\n    bindings: {\r\n        results: '<'\r\n    },\r\n    template: `\r\n        <table class=\"linkhealth-result-table\">\r\n            <thead>\r\n                <tr><th>Link text</th> <th>Link target</th> <th>Link status</th></tr>\r\n            </thead>\r\n            <tr ng-repeat=\"link in $ctrl.results\"><td ng-bind=\"link.text\"></td><td ng-bind=\"link.href\"></td><td ng-bind=\"link.status\"></td></tr>\r\n        </table>`\r\n}","﻿export class ReadabilityPluginController {\r\n\r\n    static controllerName = 'readabilityPluginController';\r\n\r\n    $scope;\r\n    editorService;\r\n\r\n    constructor($scope, editorService) {\r\n        this.$scope = $scope;\r\n        this.editorService = editorService;\r\n    }\r\n\r\n    help = e => {\r\n        e.preventDefault();\r\n        const helpOverlay = {\r\n            view: `${Umbraco.Sys.ServerVariables.Preflight.PluginPath}/plugins/readability.overlay.html`,\r\n            title: 'Readability',\r\n            description: 'Why should I care?',\r\n            size: 'small',\r\n            text: this.$scope.model.description,\r\n            close: () => this.editorService.close()                \r\n        };\r\n\r\n        this.editorService.open(helpOverlay);\r\n    };\r\n}\r\n","﻿import { PreflightService } from './preflight.service';\r\nimport { PreflightHub } from './preflight.hub';\r\n\r\nexport const ServicesModule = angular\r\n    .module('preflight.services', [])\r\n    .service(PreflightService.serviceName, PreflightService)\r\n    .service(PreflightHub.serviceName, PreflightHub)\r\n    .name;","﻿export class PreflightHub {\r\n\r\n    static serviceName = 'preflightHub';\r\n\r\n    $rootScope;\r\n    $q;\r\n    assetsService;\r\n\r\n    scripts = [];\r\n    callbacks = [];\r\n\r\n    starting = false\r\n    platform = Umbraco.Sys.ServerVariables.Plumber.platform;\r\n\r\n    constructor($rootScope, $q, assetsService) {\r\n        this.$rootScope = $rootScope;\r\n        this.$q = $q;\r\n        this.assetsService = assetsService;\r\n\r\n        const umbracoPath = Umbraco.Sys.ServerVariables.umbracoSettings.umbracoPath;\r\n        if (this.platform === 'CORE') {\r\n            this.scripts = [umbracoPath + '/lib/signalr/signalr.min.js'];\r\n        } else {\r\n            this.scripts = [\r\n                umbracoPath + '/lib/signalr/jquery.signalr.js',\r\n                umbracoPath + '/backoffice/signalr/hubs'\r\n            ];\r\n        }\r\n    }\r\n\r\n    setupHub = callback => {\r\n        let proxy;\r\n        let hub = {};\r\n\r\n        if (this.platform === 'CORE') {\r\n            $.connection = new signalR.HubConnectionBuilder()\r\n                .withUrl(Umbraco.Sys.ServerVariables.Plumber.signalRHub)\r\n                .withAutomaticReconnect()\r\n                .configureLogging(signalR.LogLevel.Warning)\r\n                .build();\r\n\r\n            proxy = $.connection;\r\n        }\r\n        else {\r\n            proxy = $.connection.plumberHub;\r\n        }\r\n\r\n        if (proxy !== undefined) {\r\n\r\n            hub = {\r\n                active: true,\r\n                start: () => {\r\n                    if (this.platform === 'CORE') {\r\n                        try {\r\n                            proxy.start()\r\n                                .then(() => { } /*console.info('Hub started =>', $.connection.connectionId)*/)\r\n                                .catch(() => console.warn('Failed to start hub'));\r\n                        } catch (e) {\r\n                            console.warn('Could not setup signalR connection', e);\r\n                        }\r\n                    }\r\n                    else {\r\n                        if ($.connection.hub.state !== $.connection.connectionState.disconnected) {\r\n                            $.connection.hub.stop(true, true);\r\n                        }\r\n                        $.connection.hub.start();\r\n                    }\r\n                },\r\n                on: (eventName, callback) => {\r\n                    proxy.on(eventName, result => {\r\n                        this.$rootScope.$apply(() => {\r\n                            if (callback) {\r\n                                callback(result);\r\n                            }\r\n                        });\r\n                    });\r\n                },\r\n                /**\r\n                 * Function is common across 472 and 5.0\r\n                 * @param methodName\r\n                 * @param callback\r\n                 */\r\n                invoke: (methodName, callback) => {\r\n                    proxy.invoke(methodName)\r\n                        .done(result =>\r\n                            this.$rootScope.$apply(() => {\r\n                                if (callback) {\r\n                                    callback(result);\r\n                                }\r\n                            }));\r\n                }\r\n            };\r\n        } else {\r\n            hub = {\r\n                on: () => { },\r\n                invoke: () => { },\r\n                start: () => console.warn('No hub to start'),\r\n            };\r\n        }\r\n\r\n        return callback(hub);\r\n    }\r\n\r\n    /**\r\n     * Function is common across 472 and 5.0\r\n     * */\r\n    processCallbacks() {\r\n        while (this.callbacks.length) {\r\n            const cb = this.callbacks.pop();\r\n            this.setupHub(cb);\r\n        }\r\n\r\n        this.starting = false;\r\n    }\r\n\r\n    /**\r\n     * Function is common across 472 and 5.0 \r\n     * @param callback\r\n     */\r\n    initHub(callback) {\r\n        this.callbacks.push(callback);\r\n\r\n        if (!this.starting) {\r\n            if ($.connection === undefined) {\r\n                this.starting = true;\r\n\r\n                const promises = [];\r\n                this.scripts.forEach(script => promises.push(this.assetsService.loadJs(script)));\r\n\r\n                this.$q.all(promises).then(() => this.processCallbacks());\r\n            } else {\r\n                this.processCallbacks();\r\n            }\r\n        }\r\n    }\r\n}","﻿export class PreflightService {\r\n\r\n    static serviceName = 'preflightService';\r\n\r\n    $http;\r\n    umbRequestHelper;\r\n\r\n    urlBase = Umbraco.Sys.ServerVariables.Preflight.ApiPath;\r\n\r\n    static helpText = `\r\n        <p>If your content is too difficult for your visitors to read, you're all going to have a bad time.</p>\r\n        <p>The readability test runs your content through the Flesch reading ease algorithm to determine text complexity.</p>\r\n        <h5>The algorithm</h5>\r\n        <p><code>RE = 206.835 - (1.015 x ASL) - (84.6 x ASW)</code></p>\r\n        <p>Where <code>RE</code> is Readability Ease, <code>ASL</code> is Average Sentence Length, and <code>ASW</code> is Average Syllables per Word</p>\r\n        <p>The result is a number between 0 and 100, where a higher score means better readability, with a score between 60 and 69 largely considered acceptable.</p>\r\n        <h5>Readability test results</h5>\r\n        <p>As well as the Flesch score, the readability test returns sentence length; average syllables per word; and long or complex words;</p>`;\r\n\r\n\r\n    constructor($http, umbRequestHelper) {\r\n        this.$http = $http;\r\n        this.umbRequestHelper = umbRequestHelper;\r\n    }\r\n\r\n    request = (method, url, data) =>\r\n        this.umbRequestHelper.resourcePromise(\r\n            method === 'GET' ? this.$http.get(this.urlBase + url) : this.$http.post(this.urlBase + url, data),\r\n            'Something broke'\r\n        );\r\n\r\n    check = id => this.request('GET', `Check/${id} `);\r\n\r\n    checkDirty = data => this.request('POST', `CheckDirty`, data);\r\n\r\n    getSettings = () => this.request('GET', `GetSettings`);\r\n\r\n    getSettingValue = alias => this.request('GET', `GetSettingValue/${alias} `);\r\n\r\n    saveSettings = (settings, tabs) => this.request('POST', `SaveSettings`, {\r\n        settings,\r\n        tabs\r\n    });\r\n\r\n    getHelpText = () => helpText;\r\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}