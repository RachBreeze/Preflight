{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/Preflight/Backoffice/app.js","src/Preflight/Backoffice/components/_componentsModule.js","src/Preflight/Backoffice/components/card/card.component.js","src/Preflight/Backoffice/components/progresscircle/progresscircle.component.js","src/Preflight/Backoffice/components/resultintro.component.js","src/Preflight/Backoffice/components/stateicon/stateicon.component.js","src/Preflight/Backoffice/constants.js","src/Preflight/Backoffice/controllers/_controllersModule.js","src/Preflight/Backoffice/controllers/notification.controller.js","src/Preflight/Backoffice/controllers/preflight.controller.js","src/Preflight/Backoffice/controllers/settings.controller.js","src/Preflight/Backoffice/interceptors/preflight.save.interceptor.js","src/Preflight/Backoffice/plugins/_pluginsModule.js","src/Preflight/Backoffice/plugins/linkhealth/linkhealth.result.component.js","src/Preflight/Backoffice/plugins/readability/readability.plugin.controller.js","src/Preflight/Backoffice/resources/_servicesModule.js","src/Preflight/Backoffice/resources/preflight.hub.js","src/Preflight/Backoffice/resources/preflight.service.js"],"names":[],"mappings":"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","file":"preflight.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","﻿import { ServicesModule } from './resources/_servicesModule';\r\nimport { ComponentsModule } from './components/_componentsModule';\r\nimport { ControllersModule } from './controllers/_controllersModule';\r\nimport { PluginsModule } from './plugins/_pluginsModule';\r\n\r\nconst name = 'preflight';\r\n\r\nangular.module(name, [\r\n    ServicesModule,\r\n    ComponentsModule,\r\n    ControllersModule,\r\n    PluginsModule,\r\n]);\r\n\r\nangular.module('umbraco').requires.push(name);","﻿import { CardComponent } from './card/card.component';\r\nimport { ProgressCircleComponent } from './progresscircle/progresscircle.component';\r\nimport { ResultIntroComponent } from './resultintro.component';\r\nimport { StateIconComponent } from './stateicon/stateicon.component';\r\n\r\nexport const ComponentsModule = angular\r\n    .module('preflight.components', [])\r\n    .component(CardComponent.name, CardComponent)\r\n    .component(ResultIntroComponent.name, ResultIntroComponent)\r\n    .component(StateIconComponent.name, StateIconComponent)\r\n    .component(ProgressCircleComponent.name, ProgressCircleComponent)\r\n    .name;","﻿class Card {\r\n\r\n    static template = `\r\n        <div class=\"card {{ ::$ctrl.cardClass }}\">\r\n            <span class=\"card-score {{ ::$ctrl.cardScoreClass }}\" ng-bind=\"::$ctrl.score\"></span>\r\n            <span class=\"card-title\">\r\n                {{ ::$ctrl.title }}<br />\r\n                {{ ::$ctrl.subtitle }}\r\n            </span>\r\n        </div>`;\r\n\r\n    cardClass = 'pass';\r\n    cardScoreClass = 'pass-color';\r\n\r\n    localizationService;\r\n\r\n    constructor(localizationService) {\r\n        this.localizationService = localizationService;\r\n    }\r\n\r\n    $onInit() {\r\n        if (this.failed) {\r\n            this.cardClass = 'fail';\r\n            this.cardScoreClass = 'fail-color';\r\n        }\r\n\r\n        if (this.title[0] === '@') {\r\n            this.localizationService.localize(this.title, this.tokens)\r\n                .then(localizedTitle => this.title = localizedTitle); \r\n        }\r\n\r\n        if (this.subtitle[0] === '@') {\r\n            this.localizationService.localize(this.subtitle, this.tokens)\r\n                .then(localizedSubtitle => this.subtitle = localizedSubtitle);\r\n        }\r\n    };\r\n}\r\n\r\nexport const CardComponent = {\r\n    transclude: true, \r\n    name: 'preflightCard',\r\n    bindings: {\r\n        title: '@?',\r\n        subtitle: '@?',\r\n        failed: '<',\r\n        score: '<',\r\n        tokens: '<'\r\n    },\r\n    template: Card.template,\r\n    controller: Card\r\n};\r\n","﻿class ProgressCircle {\n\n    static template = `\n        <div class=\"umb-progress-circle preflight-progress-circle\" ng-style=\"{'width': $ctrl.size, 'height': $ctrl.size }\">\n            <svg class=\"umb-progress-circle__view-box\" viewBox=\"0 0 33.83098862 33.83098862\"> \n                <circle class=\"umb-progress-circle__highlight--{{ $ctrl.background }}\" cx=\"16.91549431\" cy=\"16.91549431\" r=\"15.91549431\" fill=\"none\" stroke-width=\".5\"></circle>\n                <circle class=\"umb-progress-circle__highlight umb-progress-circle__highlight--{{ $ctrl.foreground }}\"\n                    cx=\"16.91549431\" cy=\"16.91549431\" r=\"15.91549431\" stroke-linecap=\"round\" fill=\"none\" stroke-width=\"2\" stroke-dasharray=\"{{ $ctrl.dashArray }}\"></circle>\n            </svg> \n            <div ng-style=\"{'font-size': $ctrl.percentageSize}\" class=\"umb-progress-circle__percentage\">\n                {{ $ctrl.label }}\n                <small>pass rate</small>                \n            </div>\n        </div>`;\n\n    r;\n    $element;\n\n    constructor($element) {\n        this.r = $element.find('.umb-progress-circle__highlight').attr('r');\r\n    }\n\n    $onChanges = () => {\n        this.draw();\r\n    }\n\n    draw = () => {\n        let percent = Math.round(this.percentage);\n        percent = percent > 100 ? 100 : percent || 0;\n\n        // calculating the circle's highlight\n        const pathLength = this.r * Math.PI * 2 * percent / 100;\n\n        // Full circle length\n        this.dashArray = `${pathLength},100`;\n\n        // set font size\n        this.percentageSize = this.size * 0.3 + 'px';\n\n        // use rounded percentage\n        this.label = `${percent}%`;\r\n    }\n}\n\nexport const ProgressCircleComponent = {\r\n    transclude: true,\r\n    name: 'progressCircle',\r\n    bindings: {\r\n        size: '@?',\n        percentage: '<',\n        done: '@',\n        foreground: '@',\n        background: '@'\r\n    },\r\n    template: ProgressCircle.template,\r\n    controller: ProgressCircle\r\n};\r\n","﻿class ResultIntro {\r\n    /**\r\n     * Directive used to render the heading for a plugin in the results view\r\n     * Send a stringified array as the tokens attribute to replace %0%, %1% .. %n% in the localized string\r\n     */\r\n\r\n    static template = `\r\n        <h5 ng-bind=\"::$ctrl.heading\" class=\"mt0\"></h5>\r\n        <span ng-if=\"$ctrl.pass\" ng-bind=\"::$ctrl.passText\"></span>`;\r\n\r\n    localizationService;\r\n\r\n    constructor(localizationService) {\r\n        this.localizationService = localizationService;\r\n    }\r\n\r\n    $onInit() {\r\n        if (this.passText[0] === '@') {\r\n            this.localizationService.localize(this.passText, this.tokens)\r\n                .then(localizedPassText => this.passText = localizedPassText);\r\n        }\r\n\r\n        if (this.heading[0] === '@') {\r\n            this.localizationService.localize(this.heading, this.tokens)\r\n                .then(localizedHeading => this.heading = localizedHeading);\r\n        }\r\n    };\r\n}\r\n\r\nexport const ResultIntroComponent = {\r\n    transclude: true,\r\n    name: 'preflightResultIntro',\r\n    bindings: {\r\n        tokens: '<',\r\n        passText: '@?',\r\n        heading: '@?',\r\n        pass: '<'\r\n    },\r\n    template: ResultIntro.template,\r\n    controller: ResultIntro\r\n};","﻿class StateIcon {\r\n\r\n    static template = `\r\n        <div class=\"state-icon {{ ::$ctrl.className }}\">\r\n            <umb-icon icon=\"icon-{{ ::$ctrl.icon }}\"></umb-icon>\r\n        </div>`;\r\n\r\n    icon = 'power';\r\n    className = 'disabled';\r\n\r\n    $onInit() {\r\n        if (!this.disabled) {\r\n            this.icon = this.failed ? 'delete' : 'check';\r\n            this.className = this.failed ? 'fail' : 'pass';\r\n        }\r\n    };\r\n}\r\n\r\nexport const StateIconComponent = {\r\n    transclude: true,\r\n    name: 'preflightStateIcon',\r\n    bindings: {\r\n        failed: '<',\r\n        disabled: '<'\r\n    },\r\n    template: StateIcon.template,\r\n    controller: StateIcon,\r\n};\r\n","﻿export const constants = {\r\n    checkboxlist: 'checkboxlist',\r\n    multipletextbox: 'multipletextbox',\r\n}","﻿import { PreflightController } from './preflight.controller';\r\nimport { NotificationController } from './notification.controller';\r\nimport { SettingsController } from './settings.controller';\r\n\r\nexport const ControllersModule = angular\r\n    .module('preflight.controllers', [])\r\n    .controller(PreflightController.controllerName, PreflightController)\r\n    .controller(NotificationController.controllerName, NotificationController)\r\n    .controller(SettingsController.controllerName, SettingsController)\r\n    .name;","﻿export class NotificationController {\r\n\r\n    static controllerName = 'preflight.notification.controller';\r\n\r\n    saveCancelled;\r\n\r\n    constructor() {\r\n\r\n    }\r\n}\r\n","﻿export class PreflightController {\r\n\r\n    static controllerName = 'preflight.controller';\r\n\r\n    $scope;\r\n    $rootScope;\r\n    $element;\r\n    $timeout;\r\n    editorState;\r\n    preflightService;\r\n    preflightHub;\r\n\r\n    dirtyHashes = {};\r\n    validPropTypes;\r\n    propsBeingChecked = [];\r\n    propertiesToTrack = [];\r\n    dirtyProps = [];\r\n\r\n    results = {\r\n        properties: []\r\n    };\r\n\r\n    jsonProperties = [\r\n        'Umbraco.Grid',\r\n        'Umbraco.NestedContent',\r\n    ];\r\n\r\n    blockListEditorAlias = 'Umbraco.BlockList';\r\n\r\n    noTests = false;\r\n    percentageDone = 20;\r\n    progressStep = 0;\r\n    activeVariant;\r\n\r\n    constructor($scope, $rootScope, $element, $timeout, editorState, preflightService, preflightHub) {\r\n        this.$scope = $scope;\r\n        this.$rootScope = $rootScope;\r\n        this.$element = $element;\r\n        this.$timeout = $timeout;\r\n        this.editorState = editorState;\r\n        this.preflightService = preflightService;\r\n        this.preflightHub = preflightHub;\r\n\r\n        this.validPropTypes = Umbraco.Sys.ServerVariables.Preflight.PropertyTypesToCheck;\r\n\r\n        this.$scope.model.badge = {\r\n            type: 'info'\r\n        };\r\n\r\n        $rootScope.$on('app.tabChange', (e, data) => {\r\n            if (data.alias === 'preflight') {\r\n                // collapse open nc controls, timeouts prevent $apply errors\r\n                for (let openNc of document.querySelectorAll('.umb-nested-content__item--active .umb-nested-content__header-bar')) {\r\n                    $timeout(() => openNc.click());\r\n                }\r\n\r\n                $timeout(() => {\r\n                    this.checkDirty();\r\n                    this.setBadgeCount();\r\n                });\r\n            }\r\n        });\r\n\r\n        $rootScope.$on('showPreflight', (event, data) => {\r\n            if (data.nodeId === $scope.content.id) {\r\n                // needs to find app closest to current scope\r\n                const appLink = $element.closest('form').find('[data-element=\"sub-view-preflight\"]');\r\n\r\n                if (appLink) {\r\n                    appLink.click();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * @param {any} arr\r\n     */\r\n    joinList = arr => {\r\n        let outStr;\r\n        if (arr.length === 1) {\r\n            outStr = arr[0];\r\n        } else if (arr.length === 2) {\r\n            outStr = arr.join(' and ');\r\n        } else if (arr.length > 2) {\r\n            outStr = arr.slice(0, -1).join(', ') + ', and ' + arr.slice(-1);\r\n        }\r\n\r\n        return outStr;\r\n    };\r\n\r\n\r\n    /**\r\n     * Convert a string to a hash for storage and comparison.\r\n     * @param {string} s - the string to hashify\r\n     * @returns {int} the generated hash\r\n     */\r\n    getHash = s => s ? s.split('').reduce((a, b) => {\r\n        a = (a << 5) - a + b.charCodeAt(0);\r\n        return a & a;\r\n    }, 0) : 1;\r\n\r\n\r\n    /**\r\n     * Get property by alias from the current variant\r\n     * @param {any} alias\r\n     */\r\n    getProperty = alias => {\r\n        for (let tab of this.editorState.current.variants.find(x => x.active).tabs) {\r\n            for (let prop of tab.properties) {\r\n                if (prop.alias === alias) {\r\n                    return prop;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * \r\n     * @param {any} editor\r\n     */\r\n    onComplete = () => {\r\n        // it's possible no tests ran, in which case results won't exist\r\n        this.noTests = this.results.properties.every(x => !x.plugins.length);\r\n        if (this.noTests) {\r\n            this.$scope.model.badge = undefined;\r\n        }\r\n\r\n        for (let p of this.results.properties) {\r\n            p.disabled = p.failedCount === -1;\r\n        }\r\n\r\n        this.showSuccessMessage = !this.results.failed && !this.noTests;\r\n        this.done = true;\r\n    }; \r\n\r\n\r\n    /**\r\n     * Updates the badge in the header with the number of failed tests\r\n     */\r\n    setBadgeCount = pending => {\r\n        if (pending) {\r\n            this.$scope.model.badge = {\r\n                type: 'warning'\r\n            };\r\n            return;\r\n        }\r\n\r\n        if (this.results && this.results.failedCount > 0) {\r\n            this.$scope.model.badge = {\r\n                count: this.results.failedCount,\r\n                type: 'alert --error-badge pf-block'\r\n            };\r\n        } else {\r\n            this.$scope.model.badge = {\r\n                type: 'success icon-'\r\n            };\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * if node is invariant, send no culture, otherwise get from language.name on the active variant\r\n     * */\r\n    getCurrentCulture = () => this.activeVariant.language ? this.activeVariant.language.culture : '';\r\n\r\n\r\n    /**\r\n     * Updates the property set with the new value, and removes any temporary property from that set\r\n     * @param {object} data - a response model item returned via the signalr hub\r\n     */\r\n    rebindResult = data => {\r\n\r\n        let newProp = true;\r\n        let totalTestsRun = 0;\r\n        let existingProp = this.results.properties.find(x => x.label === data.label);\r\n\r\n        if (existingProp) {\r\n            existingProp = Object.assign(existingProp, data);\r\n            existingProp.loading = false;\r\n            newProp = false;\r\n        }\r\n\r\n        // a new property will have a temporary placeholder - remove it\r\n        // _temp ensures grid with multiple editors only removes the correct temp entry\r\n        if (newProp && !data.remove && data.failedCount !== -1) {\r\n            const tempIndex = this.results.properties.findIndex(p => p.name === `${data.name}_temp`);\r\n            if (tempIndex !== -1) {\r\n                this.results.properties.splice(tempIndex, 1);\r\n            }\r\n            this.results.properties.push(data);\r\n        }\r\n\r\n        this.results.properties = this.results.properties.filter(x => x.remove === false);\r\n        this.results.properties = this.results.properties.filter(x => x.failedCount > -1);\r\n\r\n        this.results.failedCount = this.results.properties.reduce((prev, cur) => {\r\n            totalTestsRun += cur.totalTests;\r\n            return prev + cur.failedCount;\r\n        }, 0);\r\n\r\n        this.results.failed = this.results.failedCount > 0;\r\n        this.propsBeingCheckedStr = this.joinList(this.propsBeingChecked.splice(this.propsBeingChecked.indexOf(data.name), 1));\r\n        this.percentageFailed = (totalTestsRun - this.results.failedCount) / totalTestsRun * 100;\r\n    };\r\n\r\n\r\n    /**\r\n     * Finds dirty content properties, checks the type and builds a collection of simple models for posting to the preflight checkdirty endpoint\r\n     * Also generates and stores a hash of the property value for comparison on subsequent calls, to prevent re-fetching unchanged data\r\n     */\r\n    checkDirty = () => {\r\n\r\n        this.dirtyProps = [];\r\n        this.hasDirty = false;\r\n\r\n        for (let prop of this.propertiesToTrack) {\r\n            let currentValue = this.getProperty(prop.alias).value;\r\n\r\n            if (prop.editor === this.blockListEditorAlias) {\r\n                currentValue = JSON.stringify(currentValue.contentData);\r\n            } else {\r\n                currentValue = this.jsonProperties.includes(prop.editor) ? JSON.stringify(currentValue) : currentValue;\r\n            }\r\n\r\n            const hash = this.getHash(currentValue);\r\n\r\n            if (this.dirtyHashes[prop.label] && this.dirtyHashes[prop.label] !== hash) {\r\n\r\n                this.dirtyProps.push({\r\n                    name: prop.label,\r\n                    value: currentValue,\r\n                    editor: prop.editor\r\n                });\r\n\r\n                this.dirtyHashes[prop.label] = hash;\r\n                this.hasDirty = true;\r\n            } else if (!this.dirtyHashes[prop.label]) {\r\n                this.dirtyHashes[prop.label] = hash;\r\n            }\r\n        }\r\n\r\n        // if dirty properties exist, create a simple model for each and send the lot off for checking\r\n        // response comes via the signalr hub so is not handled here\r\n        if (this.hasDirty) {\r\n            this.$timeout(() => {\r\n\r\n                this.dirtyProps.forEach(prop => {\r\n                    for (let existing of this.results.properties.filter(p => p.name === prop.name)) {\r\n                        if (existing) {\r\n                            existing.open = false;\r\n                            existing.failedCount = -1;\r\n                        } else {\r\n                            // generate new placeholder for pending results - this is removed when the response is returned\r\n                            this.results.properties.push({\r\n                                label: prop.name,\r\n                                open: false,\r\n                                failed: false,\r\n                                failedCount: -1,\r\n                                name: `${prop.name}_temp`\r\n                            });\r\n                        }\r\n                    }\r\n\r\n                    this.propsBeingChecked.push(prop.name);\r\n                });\r\n\r\n                this.propsBeingCheckedStr = this.joinList(this.propsBeingChecked);\r\n\r\n                const payload = {\r\n                    properties: this.dirtyProps,\r\n                    culture: this.getCurrentCulture(),\r\n                    id: this.editorState.current.id\r\n                };\r\n\r\n                this.setBadgeCount(true);\r\n                this.done = false;\r\n\r\n                this.preflightService.checkDirty(payload);\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Initiates the signalr hub for returning test results\r\n     */\r\n    initSignalR = () => {\r\n\r\n        this.preflightHub.initHub(hub => {\r\n\r\n            hub.on('preflightTest',\r\n                e => {\r\n                    this.rebindResult(e);\r\n                    this.setBadgeCount();\r\n                });\r\n\r\n            hub.on('preflightComplete',\r\n                () => this.onComplete()\r\n            );\r\n\r\n            hub.start(() => {\r\n                /**\r\n                 * Check all properties when the controller loads. Won't re-run when changing between apps\r\n                 * but needs to happen after the hub loads\r\n                 */\r\n                this.$timeout(() => {\r\n                    this.setBadgeCount(true);\r\n                    this.checkDirty(); // builds initial hash array, but won't run anything                    \r\n                    this.preflightService.check(this.editorState.current.id, this.getCurrentCulture());\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    $onInit() {\r\n        this.activeVariant = this.editorState.current.variants.find(x => x.active);\r\n        this.propertiesToTrack = [];\r\n\r\n        if (this.activeVariant) {\r\n            this.activeVariant.tabs.forEach(x => {\r\n                this.propertiesToTrack = this.propertiesToTrack.concat(x.properties.map(x => {\r\n                    if (this.validPropTypes.includes(x.editor)) {\r\n                        return {\r\n                            editor: x.editor,\r\n                            alias: x.alias,\r\n                            label: x.label\r\n                        };\r\n                    }\r\n                })).filter(x => x);\r\n            });\r\n\r\n            // array will have length, as app is only sent on types with testable properties\r\n            if (this.propertiesToTrack.length) {\r\n                this.initSignalR();\r\n            }\r\n        }\r\n    }\r\n}\r\n","﻿import { constants } from '../constants';\r\n\r\nexport class SettingsController {\r\n\r\n    static controllerName = 'preflight.settings.controller';\r\n\r\n    $scope;\r\n    $q;\r\n    languageResource;\r\n    notificationsService;\r\n    preflightService;\r\n\r\n    languages = [];\r\n    tabs = [];\r\n    settings = [];\r\n    currentLanguage;\r\n\r\n    languageChangeWatcher;\r\n    testablePropertiesWatcher;\r\n\r\n    constructor($scope, $q, notificationsService, languageResource, preflightService) {\r\n        this.$scope = $scope;\r\n        this.$q = $q;\r\n        this.notificationsService = notificationsService;\r\n        this.preflightService = preflightService;\r\n        this.languageResource = languageResource;\r\n\r\n        this.languageChangeWatcher = $scope.$watch(() => this.currentLanguage, (newLang, oldLang) => {\r\n            // update settings to only include the current variant\r\n            if (newLang && newLang !== oldLang) {\r\n                this.settings.forEach(s => {\r\n                    const syncSetting = this.settingsSyncModel.find(x => x.alias === s.alias);\r\n\r\n                    // manage old language by updating the sync settings model,\r\n                    // ensuring the value is an object\r\n                    if (oldLang) {\r\n                        if (!syncSetting.value) {\r\n                            syncSetting.value = {};\r\n                        }\r\n                        syncSetting.value[oldLang] = s.value;\r\n                    }\r\n\r\n                    // get the value for the new language and update the settings model\r\n                    if (syncSetting.value && syncSetting.value[newLang]) {\r\n                        s.value = syncSetting.value[newLang];\r\n                    } else {\r\n                        // set the value to a sensible default - array if type is checkboxlist\r\n                        s.value = s.view.includes(constants.checkboxlist) || s.view.includes(constants.multipletextbox) ? [] : null;\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    watchTestableProperties = () => {\r\n        this.testablePropertiesWatcher = this.$scope.$watch(() => this.settings.find(x => x.alias === 'propertiesToTest').value, newVal => {\r\n            if (newVal) {\r\n                let propertiesToModify = this.settings.filter(x => x.alias.includes('PropertiesToTest') && x.alias !== 'propertiesToTest');\r\n\r\n                for (let prop of propertiesToModify) {\r\n                    // use the prop alias to find the checkbox set\r\n                    for (let checkbox of document.querySelectorAll(`umb-checkbox[name*=\"${prop.alias}\"]`)) {\r\n                        checkbox.querySelector('.umb-form-check').classList[newVal.indexOf(checkbox.getAttribute('value')) === -1 ? 'add' : 'remove']('pf-disabled');\r\n                    }\r\n                }\r\n            }\r\n        }, true);\r\n    };\r\n\r\n    $onDestroy() {\r\n        this.languageChangeWatcher();\r\n        this.testablePropertiesWatcher();\r\n    }\r\n\r\n    $onInit() {\r\n        const promises = [\r\n            this.preflightService.getSettings(),\r\n            this.languageResource.getAll(),\r\n        ];\r\n\r\n        this.$q.all(promises)\r\n            .then(resp => {\r\n                this.settingsSyncModel = resp[0].data.settings;\r\n                this.settings = JSON.parse(JSON.stringify(this.settingsSyncModel));\r\n\r\n                this.tabs = resp[0].data.tabs;\r\n\r\n                this.languages = resp[1];\r\n                const currentLanguage = this.languages.find(x => x.isDefault).culture;\r\n\r\n                this.settingsSyncModel.forEach(v => {\r\n                    if (v.view.includes(constants.multipletextbox) && v.value) {\r\n                        for (let [key, value] of Object.entries(v.value)) {\r\n                            v.value[key] = value.split(',').map(val => ({ value: val })).sort((a, b) => a < b);\r\n                        }\r\n                    } else if (v.view.includes(constants.checkboxlist) && v.value) {\r\n                        for (let [key, value] of Object.entries(v.value)) {\r\n                            v.value[key] = value.split(',');\r\n                        }\r\n                    }\r\n                })\r\n\r\n                this.settings.forEach(v => {\r\n                    const syncSetting = this.settingsSyncModel.find(x => x.alias === v.alias);\r\n                    v.value = syncSetting.value ? syncSetting.value[currentLanguage] : null;\r\n\r\n                    if (v.view.includes('slider')) {\r\n                        v.config = {\r\n                            handle: 'round',\r\n                            initVal1: v.alias === 'longWordSyllables' ? 5 : 65,\r\n                            maxVal: v.alias === 'longWordSyllables' ? 10 : 100,\r\n                            minVal: 0,\r\n                            orientation: 'horizontal',\r\n                            step: 1,\r\n                            tooltip: 'always',\r\n                            tooltipPosition: 'bottom',\r\n                        };\r\n                    } else if (v.view.includes(constants.multipletextbox)) {\r\n                        v.config = {\r\n                            min: 0,\r\n                            max: 0\r\n                        };\r\n                        v.validation = {};\r\n                    } else if (v.view.includes(constants.checkboxlist)) {\r\n                        v.config = {\r\n                            items: v.prevalues\r\n                        };\r\n                    }\r\n                });\r\n\r\n                this.currentLanguage = currentLanguage;\r\n                this.watchTestableProperties();\r\n            });\r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    saveSettings = () => {\r\n\r\n        // ensure the current language is correctly mapped to the sync model\r\n        this.settings.forEach(s => {\r\n            const syncSetting = this.settingsSyncModel.find(x => x.alias === s.alias);\r\n\r\n            if (!syncSetting.value) {\r\n                syncSetting.value = {};\r\n            }\r\n\r\n            syncSetting.value[this.currentLanguage] = s.value ? s.value :\r\n                s.view.includes(constants.checkboxlist) || s.view.includes(constants.multipletextbox) ? [] : null;            \r\n        });\r\n\r\n        // ensure readability is valid\r\n        let validRange = true;\r\n        this.languages.forEach(l => {\r\n            const culture = l.culture;\r\n\r\n            const min = parseInt(this.settingsSyncModel.find(x => x.alias === 'readabilityTargetMinimum').value[culture]);\r\n            const max = parseInt(this.settingsSyncModel.find(x => x.alias === 'readabilityTargetMaximum').value[culture]);\r\n\r\n            if (min > max) {\r\n                this.notificationsService.error('ERROR',\r\n                    `Unable to save settings - readability minimum cannot be greater than readability maximum (${l.name})`);\r\n                validRange = false;\r\n            } else if (min + 10 > max) {\r\n                this.notificationsService.warning('WARNING', `Readability range is narrow (${l.name})`);\r\n            }\r\n        });\r\n\r\n        if (validRange) {\r\n            // need to transform multitextbox values without digest\r\n            // so must be a new object, not a reference\r\n            const settingsToSave = JSON.parse(JSON.stringify(this.settingsSyncModel));\r\n\r\n            settingsToSave.forEach(v => {\r\n                if (v.view.includes(constants.multipletextbox)) {\r\n                    for (let [key, value] of Object.entries(v.value)) {\r\n                        v.value[key] = value.map(o => o.value).join(',');\r\n                    }\r\n                } else if (v.view.includes(constants.checkboxlist)) {\r\n                    for (let [key, value] of Object.entries(v.value)) {\r\n                        v.value[key] = value.join(',');\r\n                    }\r\n                }\r\n            });\r\n\r\n            this.preflightService.saveSettings(settingsToSave, this.tabs)\r\n                .then(resp => {\r\n                    resp.data\r\n                        ? this.notificationsService.success('SUCCESS', 'Settings updated')\r\n                        : this.notificationsService.error('ERROR', 'Unable to save settings');\r\n\r\n                    // reset dashboard form state\r\n                    this.$scope.preflightSettingsForm.$setPristine();\r\n                });\r\n        }\r\n    }\r\n}","﻿(() => {\r\n\r\n    const postSaveUrl = '/umbracoapi/content/postsave';\r\n    let presaveText;\r\n\r\n    function interceptor(notificationsService, overlayService, editorState, $rootScope, $q, $injector) {\r\n\r\n        const checkGroup = (userGroupOptInOut, culture) => {\r\n            var value = userGroupOptInOut.value[culture];\r\n            var enabledGroups = userGroupOptInOut.prevalues.filter(x => value.includes(x.value)).map(x => x.key);\r\n\r\n            let localizationService;\r\n            $injector.invoke(['localizationService', service => localizationService = service]);\r\n\r\n            $injector.invoke(['authResource', authResource => {\r\n                const promises = [\r\n                    authResource.getCurrentUser(),\r\n                    localizationService.localize('preflight_presaveText'),\r\n                ];\r\n\r\n                $q.all(promises)\r\n                    .then(resp => {\r\n                        const currentUser = resp[0];\r\n                        presaveText = resp[1];\r\n\r\n                        if (enabledGroups.some(x => currentUser.userGroups.includes(x))) {\r\n                            notificationsService.info('Preflight', presaveText);\r\n                        }\r\n                    });\r\n            }]);\r\n        };\r\n\r\n        return {\r\n            request: request => {\r\n                if (request.url.toLowerCase().includes(postSaveUrl)) {\r\n                    $injector.invoke(['preflightService', s => {\r\n                        s.getSettings()\r\n                            .then(resp => {\r\n                                const settings = resp.data.settings;\r\n\r\n                                // settings values are a dictionary keyed by culture\r\n                                const variantsToSave = request.data.value.variants.filter(v => v.save);\r\n                                const preflightVars = Umbraco.Sys.ServerVariables.Preflight;\r\n\r\n                                variantsToSave.forEach(variant => {\r\n                                    const culture = variant.language ? variant.language.culture : preflightVars.DefaultCulture;\r\n                                    const runOnSave = settings.find(x => x.guid === preflightVars.SettingsGuid.BindSaveHandler);\r\n\r\n                                    if (runOnSave && runOnSave.value[culture] === '1') {\r\n                                        const userGroupOptInOut = settings.find(x => x.guid === preflightVars.SettingsGuid.UserGroupOptIn);\r\n                                        checkGroup(userGroupOptInOut, culture);\r\n                                    }\r\n                                });\r\n                            });\r\n                    }]);\r\n                }\r\n\r\n                return request || $q.when(request);\r\n            },\r\n            response: response => {\r\n                try {\r\n                    if (response.config.url.toLowerCase().includes(postSaveUrl)) {\r\n\r\n                        const index = notificationsService.current.findIndex(x => x.message === presaveText);\r\n                        if (index > -1) {\r\n                            setTimeout(() => notificationsService.remove(index), 1500);\r\n                        }\r\n\r\n                        if (response.data.notifications) {\r\n\r\n                            const notification = response.data.notifications.filter(f => f.header === Umbraco.Sys.ServerVariables.Preflight.ContentFailedChecks)[0];\r\n\r\n                            if (notification) {\r\n                                response.data.notifications = [];\r\n\r\n                                overlayService.open({\r\n                                    view: `${Umbraco.Sys.ServerVariables.Preflight.PluginPath}/views/failed.notification.html`,\r\n                                    submitButtonLabelKey: 'preflight_review',\r\n                                    hideHeader: true,\r\n                                    saveCancelled: notification.message.includes('_True'),\r\n                                    submit: () => {\r\n                                        $rootScope.$emit('showPreflight', { nodeId: editorState.current.id });\r\n                                        overlayService.close();\r\n                                    },\r\n                                    close: () => overlayService.close()\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                catch (err) {\r\n                    console.log(err.message);\r\n                }\r\n\r\n                return response || $q.when(response);\r\n            }\r\n        };\r\n    }\r\n\r\n    angular.module('preflight')\r\n        .factory('preflight.save.interceptor', ['notificationsService', 'overlayService', 'editorState', '$rootScope', '$q', '$injector', interceptor])\r\n        .config($httpProvider => $httpProvider.interceptors.push('preflight.save.interceptor'));\r\n\r\n})();","﻿import { LinkHealthResultComponent } from './linkhealth/linkhealth.result.component';\r\nimport { ReadabilityPluginController } from './readability/readability.plugin.controller';\r\n\r\nexport const PluginsModule = angular\r\n    .module('preflight.plugins', [])\r\n    .component(LinkHealthResultComponent.name, LinkHealthResultComponent)\r\n    .controller(ReadabilityPluginController.controllerName, ReadabilityPluginController)\r\n    .name;","﻿export const LinkHealthResultComponent = {\r\n    name: 'linkHealthResult',\r\n    transclude: true,\r\n    bindings: {\r\n        results: '<'\r\n    },\r\n    template: `\r\n        <table class=\"linkhealth-result-table\">\r\n            <thead>\r\n                <tr><th>Link text</th> <th>Link target</th> <th>Link status</th></tr>\r\n            </thead>\r\n            <tr ng-repeat=\"link in $ctrl.results\"><td ng-bind=\"link.text\"></td><td ng-bind=\"link.href\"></td><td ng-bind=\"link.status\"></td></tr>\r\n        </table>`\r\n}","﻿export class ReadabilityPluginController {\r\n\r\n    static controllerName = 'readability.plugin.controller';\r\n\r\n    $scope;\r\n    editorService;\r\n\r\n    constructor($scope, editorService) {\r\n        this.$scope = $scope;\r\n        this.editorService = editorService;\r\n    }\r\n\r\n    help = () => {\r\n        const helpOverlay = {\r\n            view: `${Umbraco.Sys.ServerVariables.Preflight.PluginPath}/plugins/readability/readability.overlay.html`,\r\n            title: 'Readability',\r\n            description: 'Why should I care?',\r\n            size: 'small',\r\n            text: this.$scope.model.description,\r\n            close: () => this.editorService.close()                \r\n        };\r\n\r\n        this.editorService.open(helpOverlay);\r\n    };\r\n}\r\n","﻿import { PreflightService } from './preflight.service';\r\nimport { PreflightHub } from './preflight.hub';\r\n\r\nexport const ServicesModule = angular\r\n    .module('preflight.services', [])\r\n    .service(PreflightService.serviceName, PreflightService)\r\n    .service(PreflightHub.serviceName, PreflightHub)\r\n    .name;","﻿export class PreflightHub {\r\n\r\n    static serviceName = 'preflightHub';\r\n\r\n    $rootScope;\r\n    $q;\r\n    assetsService;\r\n\r\n    scripts = [];\r\n    callbacks = [];\r\n\r\n    starting = false\r\n    platform = Umbraco.Sys.ServerVariables.Preflight.platform;\r\n\r\n    constructor($rootScope, $q, assetsService) {\r\n        this.$rootScope = $rootScope;\r\n        this.$q = $q;\r\n        this.assetsService = assetsService;\r\n\r\n        const umbracoPath = Umbraco.Sys.ServerVariables.umbracoSettings.umbracoPath;\r\n        if (this.platform === 'CORE') {\r\n            this.scripts = [umbracoPath + '/lib/signalr/signalr.min.js'];\r\n        } else {\r\n            this.scripts = [\r\n                umbracoPath + '/lib/signalr/jquery.signalr.js',\r\n                umbracoPath + '/backoffice/signalr/hubs'\r\n            ];\r\n        }\r\n    }\r\n\r\n    setupHub = callback => {\r\n        \r\n        let proxy;\r\n        let hub = {};\r\n\r\n        if (this.platform === 'CORE') {\r\n            $.connection = new signalR.HubConnectionBuilder()\r\n                .withUrl(Umbraco.Sys.ServerVariables.Preflight.signalRHub)\r\n                .withAutomaticReconnect()\r\n                .configureLogging(signalR.LogLevel.Warning)\r\n                .build();\r\n\r\n            proxy = $.connection;\r\n        }\r\n        else {\r\n            proxy = $.connection.preflightHub;\r\n        }\r\n\r\n        if (proxy !== undefined) {\r\n            hub = {\r\n                active: true,\r\n                start: callback => {\r\n                    if (this.platform === 'CORE') {\r\n                        try {\r\n                            proxy.start()\r\n                                .then(() => callback ? callback() : {})\r\n                                .catch(() => console.warn('Failed to start hub'));\r\n                        } catch (e) {\r\n                            console.warn('Could not setup signalR connection', e);\r\n                        }\r\n                    }\r\n                    else {\r\n                        if ($.connection.hub.state !== $.connection.connectionState.disconnected) {\r\n                            $.connection.hub.stop(true, true);\r\n                        }\r\n                        $.connection.hub.start();\r\n                        callback ? callback() : {};\r\n                    }\r\n                },\r\n                on: (eventName, callback) => {\r\n                    proxy.on(eventName, result => {\r\n                        this.$rootScope.$apply(() => {\r\n                            if (callback) {\r\n                                callback(result);\r\n                            }\r\n                        });\r\n                    });\r\n                }\r\n            };\r\n        } else {\r\n            hub = {\r\n                on: () => { },\r\n                start: () => console.warn('No hub to start'),\r\n            };\r\n        }\r\n        \r\n        return callback(hub);\r\n    }\r\n\r\n\r\n    /**\r\n     * Function is common across 472 and 5.0\r\n     * */\r\n    processCallbacks() {\r\n        while (this.callbacks.length) {\r\n            const cb = this.callbacks.pop();\r\n            this.setupHub(cb);\r\n        }\r\n\r\n        this.starting = false;\r\n    }\r\n\r\n    /**\r\n     * Function is common across 472 and 5.0 \r\n     * @param callback\r\n     */\r\n    initHub(callback) {\r\n        this.callbacks.push(callback);\r\n\r\n        if (!this.starting) {\r\n            if ($.connection === undefined) {\r\n                this.starting = true;\r\n\r\n                const promises = [];\r\n                this.scripts.forEach(script => promises.push(this.assetsService.loadJs(script)));\r\n\r\n                this.$q.all(promises).then(() => this.processCallbacks());\r\n            } else {\r\n                this.processCallbacks();\r\n            }\r\n        }\r\n    }\r\n}","﻿export class PreflightService {\r\n\r\n    static serviceName = 'preflightService';\r\n\r\n    $http;\r\n    umbRequestHelper;\r\n\r\n    urlBase = Umbraco.Sys.ServerVariables.Preflight.ApiPath;\r\n\r\n    static helpText = `\r\n        <p>If your content is too difficult for your visitors to read, you're all going to have a bad time.</p>\r\n        <p>The readability test runs your content through the Flesch reading ease algorithm to determine text complexity.</p>\r\n        <h5>The algorithm</h5>\r\n        <p><code>RE = 206.835 - (1.015 x ASL) - (84.6 x ASW)</code></p>\r\n        <p>Where <code>RE</code> is Readability Ease, <code>ASL</code> is Average Sentence Length, and <code>ASW</code> is Average Syllables per Word</p>\r\n        <p>The result is a number between 0 and 100, where a higher score means better readability, with a score between 60 and 69 largely considered acceptable.</p>\r\n        <h5>Readability test results</h5>\r\n        <p>As well as the Flesch score, the readability test returns sentence length; average syllables per word; and long or complex words;</p>`;\r\n\r\n\r\n    constructor($http, umbRequestHelper) {\r\n        this.$http = $http;\r\n        this.umbRequestHelper = umbRequestHelper;\r\n    }\r\n\r\n    request = (method, url, data) =>\r\n        this.umbRequestHelper.resourcePromise(\r\n            method === 'GET' ? this.$http.get(this.urlBase + url) : this.$http.post(this.urlBase + url, data),\r\n            'Something broke'\r\n        );\r\n\r\n    check = (id, culture) => this.request('GET', `Check/${id}/${culture} `);\r\n\r\n    checkDirty = data => this.request('POST', `CheckDirty`, data);\r\n\r\n    getSettings = () => this.request('GET', `GetSettings`);\r\n\r\n    saveSettings = (settings, tabs) => this.request('POST', `SaveSettings`, {\r\n        settings,\r\n        tabs\r\n    });\r\n\r\n    getHelpText = () => helpText;\r\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}