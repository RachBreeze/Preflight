{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/Preflight/Backoffice/app.js","src/Preflight/Backoffice/components/_componentsModule.js","src/Preflight/Backoffice/components/card/card.component.js","src/Preflight/Backoffice/components/progresscircle/progresscircle.component.js","src/Preflight/Backoffice/components/resultintro.component.js","src/Preflight/Backoffice/components/stateicon/stateicon.component.js","src/Preflight/Backoffice/constants.js","src/Preflight/Backoffice/controllers/_controllersModule.js","src/Preflight/Backoffice/controllers/notification.controller.js","src/Preflight/Backoffice/controllers/preflight.controller.js","src/Preflight/Backoffice/controllers/settings.controller.js","src/Preflight/Backoffice/interceptors/preflight.save.interceptor.js","src/Preflight/Backoffice/plugins/_pluginsModule.js","src/Preflight/Backoffice/plugins/linkhealth/linkhealth.result.component.js","src/Preflight/Backoffice/plugins/readability/readability.plugin.controller.js","src/Preflight/Backoffice/resources/_servicesModule.js","src/Preflight/Backoffice/resources/preflight.hub.js","src/Preflight/Backoffice/resources/preflight.service.js"],"names":[],"mappings":"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","file":"preflight.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","﻿import { ServicesModule } from './resources/_servicesModule';\r\nimport { ComponentsModule } from './components/_componentsModule';\r\nimport { ControllersModule } from './controllers/_controllersModule';\r\nimport { PluginsModule } from './plugins/_pluginsModule';\r\n\r\nconst name = 'preflight';\r\n\r\nangular.module(name, [\r\n    ServicesModule,\r\n    ComponentsModule,\r\n    ControllersModule,\r\n    PluginsModule,\r\n]);\r\n\r\nangular.module('umbraco').requires.push(name);","﻿import { CardComponent } from './card/card.component';\r\nimport { ProgressCircleComponent } from './progresscircle/progresscircle.component';\r\nimport { ResultIntroComponent } from './resultintro.component';\r\nimport { StateIconComponent } from './stateicon/stateicon.component';\r\n\r\nexport const ComponentsModule = angular\r\n    .module('preflight.components', [])\r\n    .component(CardComponent.name, CardComponent)\r\n    .component(ResultIntroComponent.name, ResultIntroComponent)\r\n    .component(StateIconComponent.name, StateIconComponent)\r\n    .component(ProgressCircleComponent.name, ProgressCircleComponent)\r\n    .name;","﻿class Card {\r\n\r\n    static template = `\r\n        <div class=\"card {{ ::$ctrl.cardClass }}\">\r\n            <span class=\"card-score {{ ::$ctrl.cardScoreClass }}\" ng-bind=\"::$ctrl.score\"></span>\r\n            <span class=\"card-title\">\r\n                {{ ::$ctrl.title }}<br />\r\n                {{ ::$ctrl.subtitle }}\r\n            </span>\r\n        </div>`;\r\n\r\n    cardClass = 'pass';\r\n    cardScoreClass = 'pass-color';\r\n\r\n    localizationService;\r\n\r\n    constructor(localizationService) {\r\n        this.localizationService = localizationService;\r\n    }\r\n\r\n    $onInit() {\r\n        if (this.failed) {\r\n            this.cardClass = 'fail';\r\n            this.cardScoreClass = 'fail-color';\r\n        }\r\n\r\n        if (this.title[0] === '@') {\r\n            this.localizationService.localize(this.title, this.tokens)\r\n                .then(localizedTitle => this.title = localizedTitle); \r\n        }\r\n\r\n        if (this.subtitle[0] === '@') {\r\n            this.localizationService.localize(this.subtitle, this.tokens)\r\n                .then(localizedSubtitle => this.subtitle = localizedSubtitle);\r\n        }\r\n    };\r\n}\r\n\r\nexport const CardComponent = {\r\n    transclude: true, \r\n    name: 'preflightCard',\r\n    bindings: {\r\n        title: '@?',\r\n        subtitle: '@?',\r\n        failed: '<',\r\n        score: '<',\r\n        tokens: '<'\r\n    },\r\n    template: Card.template,\r\n    controller: Card\r\n};\r\n","﻿class ProgressCircle {\n\n    static template = `\n        <div class=\"umb-progress-circle preflight-progress-circle\" ng-style=\"{'width': $ctrl.size, 'height': $ctrl.size }\">\n            <svg class=\"umb-progress-circle__view-box\" viewBox=\"0 0 33.83098862 33.83098862\"> \n                <circle class=\"umb-progress-circle__highlight--{{ $ctrl.background }}\" cx=\"16.91549431\" cy=\"16.91549431\" r=\"15.91549431\" fill=\"none\" stroke-width=\".5\"></circle>\n                <circle class=\"umb-progress-circle__highlight umb-progress-circle__highlight--{{ $ctrl.foreground }}\"\n                    cx=\"16.91549431\" cy=\"16.91549431\" r=\"15.91549431\" stroke-linecap=\"round\" fill=\"none\" stroke-width=\"2\" stroke-dasharray=\"{{ $ctrl.dashArray }}\"></circle>\n            </svg> \n            <div ng-style=\"{'font-size': $ctrl.percentageSize}\" class=\"umb-progress-circle__percentage\">\n                {{ $ctrl.label }}\n                <small>pass rate</small>                \n            </div>\n        </div>`;\n\n    r;\n    $element;\n\n    constructor($element) {\n        this.r = $element.find('.umb-progress-circle__highlight').attr('r');\r\n    }\n\n    $onChanges = () => {\n        this.draw();\r\n    }\n\n    draw = () => {\n        let percent = Math.round(this.percentage);\n        percent = percent > 100 ? 100 : percent || 0;\n\n        // calculating the circle's highlight\n        const pathLength = this.r * Math.PI * 2 * percent / 100;\n\n        // Full circle length\n        this.dashArray = `${pathLength},100`;\n\n        // set font size\n        this.percentageSize = this.size * 0.3 + 'px';\n\n        // use rounded percentage\n        this.label = `${percent}%`;\r\n    }\n}\n\nexport const ProgressCircleComponent = {\r\n    transclude: true,\r\n    name: 'progressCircle',\r\n    bindings: {\r\n        size: '@?',\n        percentage: '<',\n        done: '@',\n        foreground: '@',\n        background: '@'\r\n    },\r\n    template: ProgressCircle.template,\r\n    controller: ProgressCircle\r\n};\r\n","﻿class ResultIntro {\r\n    /**\r\n     * Directive used to render the heading for a plugin in the results view\r\n     * Send a stringified array as the tokens attribute to replace %0%, %1% .. %n% in the localized string\r\n     */\r\n\r\n    static template = `\r\n        <h5 ng-bind=\"::$ctrl.heading\" class=\"mt0\"></h5>\r\n        <span ng-if=\"$ctrl.pass\" ng-bind=\"::$ctrl.passText\"></span>`;\r\n\r\n    localizationService;\r\n\r\n    constructor(localizationService) {\r\n        this.localizationService = localizationService;\r\n    }\r\n\r\n    $onInit() {\r\n        if (this.passText[0] === '@') {\r\n            this.localizationService.localize(this.passText, this.tokens)\r\n                .then(localizedPassText => this.passText = localizedPassText);\r\n        }\r\n\r\n        if (this.heading[0] === '@') {\r\n            this.localizationService.localize(this.heading, this.tokens)\r\n                .then(localizedHeading => this.heading = localizedHeading);\r\n        }\r\n    };\r\n}\r\n\r\nexport const ResultIntroComponent = {\r\n    transclude: true,\r\n    name: 'preflightResultIntro',\r\n    bindings: {\r\n        tokens: '<',\r\n        passText: '@?',\r\n        heading: '@?',\r\n        pass: '<'\r\n    },\r\n    template: ResultIntro.template,\r\n    controller: ResultIntro\r\n};","﻿class StateIcon {\r\n\r\n    static template = `\r\n        <div class=\"state-icon {{ ::$ctrl.className }}\">\r\n            <umb-icon icon=\"icon-{{ ::$ctrl.icon }}\"></umb-icon>\r\n        </div>`;\r\n\r\n    icon = 'power';\r\n    className = 'disabled';\r\n\r\n    $onInit() {\r\n        if (!this.disabled) {\r\n            this.icon = this.failed ? 'delete' : 'check';\r\n            this.className = this.failed ? 'fail' : 'pass';\r\n        }\r\n    };\r\n}\r\n\r\nexport const StateIconComponent = {\r\n    transclude: true,\r\n    name: 'preflightStateIcon',\r\n    bindings: {\r\n        failed: '<',\r\n        disabled: '<'\r\n    },\r\n    template: StateIcon.template,\r\n    controller: StateIcon,\r\n};\r\n","﻿export const constants = {\r\n    checkboxlist: 'checkboxlist',\r\n    multipletextbox: 'multipletextbox',\r\n}","﻿import { PreflightController } from './preflight.controller';\r\nimport { NotificationController } from './notification.controller';\r\nimport { SettingsController } from './settings.controller';\r\n\r\nexport const ControllersModule = angular\r\n    .module('preflight.controllers', [])\r\n    .controller(PreflightController.controllerName, PreflightController)\r\n    .controller(NotificationController.controllerName, NotificationController)\r\n    .controller(SettingsController.controllerName, SettingsController)\r\n    .name;","﻿export class NotificationController {\r\n\r\n    static controllerName = 'preflight.notification.controller';\r\n\r\n    saveCancelled;\r\n\r\n    constructor() {\r\n\r\n    }\r\n}\r\n","﻿export class PreflightController {\r\n\r\n    static controllerName = 'preflight.controller';\r\n\r\n    $scope;\r\n    $rootScope;\r\n    $element;\r\n    $timeout;\r\n    editorState;\r\n    preflightService;\r\n    preflightHub;\r\n\r\n    dirtyHashes = {};\r\n    validPropTypes;\r\n    propsBeingChecked = [];\r\n    propertiesToTrack = [];\r\n    dirtyProps = [];\r\n\r\n    results = {\r\n        properties: []\r\n    };\r\n\r\n    jsonProperties = [\r\n        'Umbraco.Grid',\r\n        'Umbraco.NestedContent',\r\n    ];\r\n\r\n    blockListEditorAlias = 'Umbraco.BlockList';\r\n\r\n    noTests = false;\r\n    percentageDone = 20;\r\n    progressStep = 0;\r\n    activeVariant;\r\n\r\n    constructor($scope, $rootScope, $element, $timeout, editorState, preflightService, preflightHub) {\r\n        this.$scope = $scope;\r\n        this.$rootScope = $rootScope;\r\n        this.$element = $element;\r\n        this.$timeout = $timeout;\r\n        this.editorState = editorState;\r\n        this.preflightService = preflightService;\r\n        this.preflightHub = preflightHub;\r\n\r\n        this.validPropTypes = Umbraco.Sys.ServerVariables.Preflight.PropertyTypesToCheck;\r\n\r\n        this.$scope.model.badge = {\r\n            type: 'info'\r\n        };\r\n\r\n        $rootScope.$on('app.tabChange', (e, data) => {\r\n            if (data.alias === 'preflight') {\r\n                // collapse open nc controls, timeouts prevent $apply errors\r\n                for (let openNc of document.querySelectorAll('.umb-nested-content__item--active .umb-nested-content__header-bar')) {\r\n                    $timeout(() => openNc.click());\r\n                }\r\n\r\n                $timeout(() => {\r\n                    this.checkDirty();\r\n                    this.setBadgeCount();\r\n                });\r\n            }\r\n        });\r\n\r\n        $rootScope.$on('showPreflight', (event, data) => {\r\n            if (data.nodeId === $scope.content.id) {\r\n                // needs to find app closest to current scope\r\n                const appLink = $element.closest('form').find('[data-element=\"sub-view-preflight\"]');\r\n\r\n                if (appLink) {\r\n                    appLink.click();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * @param {any} arr\r\n     */\r\n    joinList = arr => {\r\n        let outStr;\r\n        if (arr.length === 1) {\r\n            outStr = arr[0];\r\n        } else if (arr.length === 2) {\r\n            outStr = arr.join(' and ');\r\n        } else if (arr.length > 2) {\r\n            outStr = arr.slice(0, -1).join(', ') + ', and ' + arr.slice(-1);\r\n        }\r\n\r\n        return outStr;\r\n    };\r\n\r\n\r\n    /**\r\n     * Convert a string to a hash for storage and comparison.\r\n     * @param {string} s - the string to hashify\r\n     * @returns {int} the generated hash\r\n     */\r\n    getHash = s => s ? s.split('').reduce((a, b) => {\r\n        a = (a << 5) - a + b.charCodeAt(0);\r\n        return a & a;\r\n    }, 0) : 1;\r\n\r\n\r\n    /**\r\n     * Get property by alias from the current variant\r\n     * @param {any} alias\r\n     */\r\n    getProperty = alias => {\r\n        for (let tab of this.editorState.current.variants.find(x => x.active).tabs) {\r\n            for (let prop of tab.properties) {\r\n                if (prop.alias === alias) {\r\n                    return prop;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * \r\n     * @param {any} editor\r\n     */\r\n    onComplete = () => {\r\n        // it's possible no tests ran, in which case results won't exist\r\n        this.noTests = this.results.properties.every(x => !x.plugins.length);\r\n        if (this.noTests) {\r\n            this.$scope.model.badge = undefined;\r\n        }\r\n\r\n        for (let p of this.results.properties) {\r\n            p.disabled = p.failedCount === -1;\r\n        }\r\n\r\n        this.showSuccessMessage = !this.results.failed && !this.noTests;\r\n        this.done = true;\r\n    }; \r\n\r\n\r\n    /**\r\n     * Updates the badge in the header with the number of failed tests\r\n     */\r\n    setBadgeCount = pending => {\r\n        if (pending) {\r\n            this.$scope.model.badge = {\r\n                type: 'warning'\r\n            };\r\n            return;\r\n        }\r\n\r\n        if (this.results && this.results.failedCount > 0) {\r\n            this.$scope.model.badge = {\r\n                count: this.results.failedCount,\r\n                type: 'alert --error-badge pf-block'\r\n            };\r\n        } else {\r\n            this.$scope.model.badge = {\r\n                type: 'success icon-'\r\n            };\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * if node is invariant, send no culture, otherwise get from language.name on the active variant\r\n     * */\r\n    getCurrentCulture = () => this.activeVariant.language ? this.activeVariant.language.culture : '';\r\n\r\n\r\n    /**\r\n     * Updates the property set with the new value, and removes any temporary property from that set\r\n     * @param {object} data - a response model item returned via the signalr hub\r\n     */\r\n    rebindResult = data => {\r\n        console.log(data.label, data);\r\n        let newProp = true;\r\n        let totalTestsRun = 0;\r\n        let existingProp = this.results.properties.find(x => x.label === data.label);\r\n\r\n        if (existingProp) {\r\n            existingProp = Object.assign(existingProp, data);\r\n            existingProp.loading = false;\r\n            newProp = false;\r\n        }\r\n\r\n        // a new property will have a temporary placeholder - remove it\r\n        // _temp ensures grid with multiple editors only removes the correct temp entry\r\n        if (newProp && !data.remove && data.failedCount !== -1) {\r\n            const tempIndex = this.results.properties.findIndex(p => p.name === `${data.name}_temp`);\r\n            if (tempIndex !== -1) {\r\n                this.results.properties.splice(tempIndex, 1);\r\n            }\r\n            this.results.properties.push(data);\r\n        }\r\n\r\n        this.results.properties = this.results.properties.filter(x => x.remove === false);\r\n        this.results.properties = this.results.properties.filter(x => x.failedCount > -1);\r\n\r\n        this.results.failedCount = this.results.properties.reduce((prev, cur) => {\r\n            totalTestsRun += cur.totalTests;\r\n            return prev + cur.failedCount;\r\n        }, 0);\r\n\r\n        this.results.failed = this.results.failedCount > 0;\r\n        this.propsBeingCheckedStr = this.joinList(this.propsBeingChecked.splice(this.propsBeingChecked.indexOf(data.name), 1));\r\n        this.percentageFailed = (totalTestsRun - this.results.failedCount) / totalTestsRun * 100;\r\n    };\r\n\r\n\r\n    /**\r\n     * Finds dirty content properties, checks the type and builds a collection of simple models for posting to the preflight checkdirty endpoint\r\n     * Also generates and stores a hash of the property value for comparison on subsequent calls, to prevent re-fetching unchanged data\r\n     */\r\n    checkDirty = () => {\r\n\r\n        this.dirtyProps = [];\r\n        this.hasDirty = false;\r\n\r\n        for (let prop of this.propertiesToTrack) {\r\n            let currentValue = this.getProperty(prop.alias).value;\r\n\r\n            if (prop.editor === this.blockListEditorAlias) {\r\n                currentValue = JSON.stringify(currentValue.contentData);\r\n            } else {\r\n                currentValue = this.jsonProperties.includes(prop.editor) ? JSON.stringify(currentValue) : currentValue;\r\n            }\r\n\r\n            const hash = this.getHash(currentValue);\r\n\r\n            if (this.dirtyHashes[prop.label] && this.dirtyHashes[prop.label] !== hash) {\r\n\r\n                this.dirtyProps.push({\r\n                    name: prop.label,\r\n                    value: currentValue,\r\n                    editor: prop.editor\r\n                });\r\n\r\n                this.dirtyHashes[prop.label] = hash;\r\n                this.hasDirty = true;\r\n            } else if (!this.dirtyHashes[prop.label]) {\r\n                this.dirtyHashes[prop.label] = hash;\r\n            }\r\n        }\r\n\r\n        // if dirty properties exist, create a simple model for each and send the lot off for checking\r\n        // response comes via the signalr hub so is not handled here\r\n        if (this.hasDirty) {\r\n            this.$timeout(() => {\r\n\r\n                this.dirtyProps.forEach(prop => {\r\n                    for (let existing of this.results.properties.filter(p => p.name === prop.name)) {\r\n                        if (existing) {\r\n                            existing.open = false;\r\n                            existing.failedCount = -1;\r\n                        } else {\r\n                            // generate new placeholder for pending results - this is removed when the response is returned\r\n                            this.results.properties.push({\r\n                                label: prop.name,\r\n                                open: false,\r\n                                failed: false,\r\n                                failedCount: -1,\r\n                                name: `${prop.name}_temp`\r\n                            });\r\n                        }\r\n                    }\r\n\r\n                    this.propsBeingChecked.push(prop.name);\r\n                });\r\n\r\n                this.propsBeingCheckedStr = this.joinList(this.propsBeingChecked);\r\n\r\n                const payload = {\r\n                    properties: this.dirtyProps,\r\n                    culture: this.getCurrentCulture(),\r\n                    id: this.editorState.current.id\r\n                };\r\n\r\n                this.setBadgeCount(true);\r\n                this.done = false;\r\n\r\n                this.preflightService.checkDirty(payload);\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Initiates the signalr hub for returning test results\r\n     */\r\n    initSignalR = () => {\r\n\r\n        this.preflightHub.initHub(hub => {\r\n\r\n            hub.on('preflightTest',\r\n                e => {\r\n                    this.rebindResult(e);\r\n                    this.setBadgeCount();\r\n                });\r\n\r\n            hub.on('preflightComplete',\r\n                () => this.onComplete()\r\n            );\r\n\r\n            hub.start(() => {\r\n                /**\r\n                 * Check all properties when the controller loads. Won't re-run when changing between apps\r\n                 * but needs to happen after the hub loads\r\n                 */\r\n                this.$timeout(() => {\r\n                    this.setBadgeCount(true);\r\n                    this.checkDirty(); // builds initial hash array, but won't run anything                    \r\n                    this.preflightService.check(this.editorState.current.id, this.getCurrentCulture());\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    $onInit() {\r\n        this.activeVariant = this.editorState.current.variants.find(x => x.active);\r\n        this.propertiesToTrack = [];\r\n\r\n        if (this.activeVariant) {\r\n            this.activeVariant.tabs.forEach(x => {\r\n                this.propertiesToTrack = this.propertiesToTrack.concat(x.properties.map(x => {\r\n                    if (this.validPropTypes.includes(x.editor)) {\r\n                        return {\r\n                            editor: x.editor,\r\n                            alias: x.alias,\r\n                            label: x.label\r\n                        };\r\n                    }\r\n                })).filter(x => x);\r\n            });\r\n\r\n            // array will have length, as app is only sent on types with testable properties\r\n            if (this.propertiesToTrack.length) {\r\n                this.initSignalR();\r\n            }\r\n        }\r\n    }\r\n}\r\n","﻿import { constants } from '../constants';\r\n\r\nexport class SettingsController {\r\n\r\n    static controllerName = 'preflight.settings.controller';\r\n\r\n    $scope;\r\n    $q;\r\n    languageResource;\r\n    localizationService;\r\n    notificationsService;\r\n    preflightService;\r\n\r\n    languages = [];\r\n    tabs = [];\r\n    settings = [];\r\n    currentLanguage;\r\n\r\n    languageChangeWatcher;\r\n    testablePropertiesWatcher;\r\n\r\n    constructor($scope, $q, notificationsService, languageResource, localizationService, preflightService) {\r\n        this.$scope = $scope;\r\n        this.$q = $q;\r\n\r\n        this.notificationsService = notificationsService;\r\n        this.preflightService = preflightService;\r\n        this.languageResource = languageResource;\r\n        this.localizationService = localizationService;\r\n\r\n        this.languageChangeWatcher = $scope.$watch(() => this.currentLanguage, (newLang, oldLang) => {\r\n            // update settings to only include the current variant\r\n            if (newLang && newLang !== oldLang) {\r\n                this.settings.forEach(s => {\r\n                    const syncSetting = this.settingsSyncModel.find(x => x.alias === s.alias);\r\n\r\n                    // manage old language by updating the sync settings model,\r\n                    // ensuring the value is an object\r\n                    if (oldLang) {\r\n                        if (!syncSetting.value) {\r\n                            syncSetting.value = {};\r\n                        }\r\n                        syncSetting.value[oldLang] = s.value;\r\n                    }\r\n\r\n                    // get the value for the new language and update the settings model\r\n                    if (syncSetting.value && syncSetting.value[newLang]) {\r\n                        s.value = syncSetting.value[newLang];\r\n                    } else {\r\n                        // set the value to a sensible default - array if type is checkboxlist\r\n                        s.value = s.view.includes(constants.checkboxlist) || s.view.includes(constants.multipletextbox) ? [] : null;\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    watchTestableProperties = () => {\r\n        this.testablePropertiesWatcher = this.$scope.$watch(() => this.settings.find(x => x.alias === 'propertiesToTest').value, newVal => {\r\n            if (newVal) {\r\n                let propertiesToModify = this.settings.filter(x => x.alias.includes('PropertiesToTest') && x.alias !== 'propertiesToTest');\r\n\r\n                for (let prop of propertiesToModify) {\r\n                    // use the prop alias to find the checkbox set\r\n                    for (let checkbox of document.querySelectorAll(`umb-checkbox[name*=\"${prop.alias}\"]`)) {\r\n                        checkbox.querySelector('.umb-form-check').classList[newVal.indexOf(checkbox.getAttribute('value')) === -1 ? 'add' : 'remove']('pf-disabled');\r\n                    }\r\n                }\r\n            }\r\n        }, true);\r\n    };\r\n\r\n    $onDestroy() {\r\n        this.languageChangeWatcher();\r\n        this.testablePropertiesWatcher();\r\n    }\r\n\r\n    $onInit() {\r\n        const promises = [\r\n            this.preflightService.getSettings(),\r\n            this.languageResource.getAll(),\r\n        ];\r\n\r\n        this.$q.all(promises)\r\n            .then(resp => {\r\n                this.settingsSyncModel = resp[0].data.settings;\r\n                this.settings = JSON.parse(JSON.stringify(this.settingsSyncModel));\r\n\r\n                this.tabs = resp[0].data.tabs;\r\n\r\n                this.languages = resp[1];\r\n                const currentLanguage = this.languages.find(x => x.isDefault).culture;\r\n\r\n                this.settingsSyncModel.forEach(v => {\r\n                    if (v.view.includes(constants.multipletextbox) && v.value) {\r\n                        for (let [key, value] of Object.entries(v.value)) {\r\n                            v.value[key] = value.split(',').map(val => ({ value: val })).sort((a, b) => a < b);\r\n                        }\r\n                    } else if (v.view.includes(constants.checkboxlist) && v.value) {\r\n                        for (let [key, value] of Object.entries(v.value)) {\r\n                            v.value[key] = value.split(',');\r\n                        }\r\n                    }\r\n                })\r\n\r\n                this.settings.forEach(v => {\r\n                    const syncSetting = this.settingsSyncModel.find(x => x.alias === v.alias);\r\n                    v.value = syncSetting.value ? syncSetting.value[currentLanguage] : null;\r\n\r\n                    if (v.view.includes('slider')) {\r\n                        v.config = {\r\n                            handle: 'round',\r\n                            initVal1: v.alias === 'longWordSyllables' ? 5 : 65,\r\n                            maxVal: v.alias === 'longWordSyllables' ? 10 : 100,\r\n                            minVal: 0,\r\n                            orientation: 'horizontal',\r\n                            step: 1,\r\n                            tooltip: 'always',\r\n                            tooltipPosition: 'bottom',\r\n                        };\r\n                    } else if (v.view.includes(constants.multipletextbox)) {\r\n                        v.config = {\r\n                            min: 0,\r\n                            max: 0\r\n                        };\r\n                        v.validation = {};\r\n                    } else if (v.view.includes(constants.checkboxlist)) {\r\n                        v.config = {\r\n                            items: v.prevalues\r\n                        };\r\n                    }\r\n                });\r\n\r\n                this.currentLanguage = currentLanguage;\r\n                this.watchTestableProperties();\r\n            });\r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    saveSettings = () => {\r\n\r\n        // ensure the current language is correctly mapped to the sync model\r\n        this.settings.forEach(s => {\r\n            const syncSetting = this.settingsSyncModel.find(x => x.alias === s.alias);\r\n\r\n            if (!syncSetting.value) {\r\n                syncSetting.value = {};\r\n            }\r\n\r\n            syncSetting.value[this.currentLanguage] = s.value ? s.value :\r\n                s.view.includes(constants.checkboxlist) || s.view.includes(constants.multipletextbox) ? [] : null;            \r\n        });\r\n\r\n        // ensure readability is valid\r\n        let validRange = true;\r\n        this.languages.forEach(l => {\r\n            const culture = l.culture;\r\n\r\n            const min = parseInt(this.settingsSyncModel.find(x => x.alias === 'readabilityTargetMinimum').value[culture]);\r\n            const max = parseInt(this.settingsSyncModel.find(x => x.alias === 'readabilityTargetMaximum').value[culture]);\r\n\r\n            if (min > max) {\r\n                this.notificationsService.error('ERROR',\r\n                    `Unable to save settings - readability minimum cannot be greater than readability maximum (${l.name})`);\r\n                validRange = false;\r\n            } else if (min + 10 > max) {\r\n                this.notificationsService.warning('WARNING', `Readability range is narrow (${l.name})`);\r\n            }\r\n        });\r\n\r\n        if (validRange) {\r\n            // need to transform multitextbox values without digest\r\n            // so must be a new object, not a reference\r\n            const settingsToSave = JSON.parse(JSON.stringify(this.settingsSyncModel));\r\n\r\n            settingsToSave.forEach(v => {\r\n                if (v.view.includes(constants.multipletextbox)) {\r\n                    for (let [key, value] of Object.entries(v.value)) {\r\n                        v.value[key] = value.map(o => o.value).join(',');\r\n                    }\r\n                } else if (v.view.includes(constants.checkboxlist)) {\r\n                    for (let [key, value] of Object.entries(v.value)) {\r\n                        v.value[key] = value.join(',');\r\n                    }\r\n                }\r\n            });\r\n\r\n            this.preflightService.saveSettings(settingsToSave, this.tabs)\r\n                .then(_ => this.$scope.preflightSettingsForm.$setPristine());\r\n        }\r\n    }\r\n}","﻿(() => {\r\n\r\n    const postSaveUrl = '/umbracoapi/content/postsave';\r\n    let presaveText;\r\n\r\n    function interceptor(notificationsService, overlayService, editorState, $rootScope, $q, $injector) {\r\n\r\n        const checkGroup = (userGroupOptInOut, culture) => {\r\n            var value = userGroupOptInOut.value[culture];\r\n            var enabledGroups = userGroupOptInOut.prevalues.filter(x => value.includes(x.value)).map(x => x.key);\r\n\r\n            let localizationService;\r\n            $injector.invoke(['localizationService', service => localizationService = service]);\r\n\r\n            $injector.invoke(['authResource', authResource => {\r\n                const promises = [\r\n                    authResource.getCurrentUser(),\r\n                    localizationService.localize('preflight_presaveText'),\r\n                ];\r\n\r\n                $q.all(promises)\r\n                    .then(resp => {\r\n                        const currentUser = resp[0];\r\n                        presaveText = resp[1];\r\n\r\n                        if (enabledGroups.some(x => currentUser.userGroups.includes(x))) {\r\n                            notificationsService.info('Preflight', presaveText);\r\n                        }\r\n                    });\r\n            }]);\r\n        };\r\n\r\n        return {\r\n            request: request => {\r\n                if (request.url.toLowerCase().includes(postSaveUrl)) {\r\n                    $injector.invoke(['preflightService', s => {\r\n                        s.getSettings()\r\n                            .then(resp => {\r\n                                const settings = resp.data.settings;\r\n\r\n                                // settings values are a dictionary keyed by culture\r\n                                const variantsToSave = request.data.value.variants.filter(v => v.save);\r\n                                const preflightVars = Umbraco.Sys.ServerVariables.Preflight;\r\n\r\n                                variantsToSave.forEach(variant => {\r\n                                    const culture = variant.language ? variant.language.culture : preflightVars.DefaultCulture;\r\n                                    const runOnSave = settings.find(x => x.guid === preflightVars.SettingsGuid.BindSaveHandler);\r\n\r\n                                    if (runOnSave && runOnSave.value[culture] === '1') {\r\n                                        const userGroupOptInOut = settings.find(x => x.guid === preflightVars.SettingsGuid.UserGroupOptIn);\r\n                                        checkGroup(userGroupOptInOut, culture);\r\n                                    }\r\n                                });\r\n                            });\r\n                    }]);\r\n                }\r\n\r\n                return request || $q.when(request);\r\n            },\r\n            response: response => {\r\n                try {\r\n                    if (response.config.url.toLowerCase().includes(postSaveUrl)) {\r\n\r\n                        const index = notificationsService.current.findIndex(x => x.message === presaveText);\r\n                        if (index > -1) {\r\n                            setTimeout(() => notificationsService.remove(index), 1500);\r\n                        }\r\n\r\n                        if (response.data.notifications) {\r\n\r\n                            const notification = response.data.notifications.filter(f => f.header === Umbraco.Sys.ServerVariables.Preflight.ContentFailedChecks)[0];\r\n\r\n                            if (notification) {\r\n                                response.data.notifications = [];\r\n\r\n                                overlayService.open({\r\n                                    view: `${Umbraco.Sys.ServerVariables.Preflight.PluginPath}/views/failed.notification.html`,\r\n                                    submitButtonLabelKey: 'preflight_review',\r\n                                    hideHeader: true,\r\n                                    saveCancelled: notification.message.includes('_True'),\r\n                                    submit: () => {\r\n                                        $rootScope.$emit('showPreflight', { nodeId: editorState.current.id });\r\n                                        overlayService.close();\r\n                                    },\r\n                                    close: () => overlayService.close()\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                catch (err) {\r\n                    console.log(err.message);\r\n                }\r\n\r\n                return response || $q.when(response);\r\n            }\r\n        };\r\n    }\r\n\r\n    angular.module('preflight')\r\n        .factory('preflight.save.interceptor', ['notificationsService', 'overlayService', 'editorState', '$rootScope', '$q', '$injector', interceptor])\r\n        .config($httpProvider => $httpProvider.interceptors.push('preflight.save.interceptor'));\r\n\r\n})();","﻿import { LinkHealthResultComponent } from './linkhealth/linkhealth.result.component';\r\nimport { ReadabilityPluginController } from './readability/readability.plugin.controller';\r\n\r\nexport const PluginsModule = angular\r\n    .module('preflight.plugins', [])\r\n    .component(LinkHealthResultComponent.name, LinkHealthResultComponent)\r\n    .controller(ReadabilityPluginController.controllerName, ReadabilityPluginController)\r\n    .name;","﻿export const LinkHealthResultComponent = {\r\n    name: 'linkHealthResult',\r\n    transclude: true,\r\n    bindings: {\r\n        results: '<'\r\n    },\r\n    template: `\r\n        <table class=\"linkhealth-result-table\">\r\n            <thead>\r\n                <tr><th>Link text</th> <th>Link target</th> <th>Link status</th></tr>\r\n            </thead>\r\n            <tr ng-repeat=\"link in $ctrl.results\"><td ng-bind=\"link.text\"></td><td ng-bind=\"link.href\"></td><td ng-bind=\"link.status\"></td></tr>\r\n        </table>`\r\n}","﻿export class ReadabilityPluginController {\r\n\r\n    static controllerName = 'readability.plugin.controller';\r\n\r\n    $scope;\r\n    overlayService;\r\n\r\n    constructor($scope, overlayService) {\r\n        this.$scope = $scope;\r\n        this.overlayService = overlayService;\r\n    }\r\n\r\n    help = () => {\r\n        const overlay = {\r\n            view: `${Umbraco.Sys.ServerVariables.Preflight.PluginPath}/plugins/readability/readability.overlay.html`,\r\n            title: this.$scope.model.name,\r\n            size: 'medium',\r\n            content: this.$scope.model.description,\r\n            close: () => this.overlayService.close(),                \r\n        };\r\n\r\n        this.overlayService.open(overlay);\r\n    };\r\n}\r\n","﻿import { PreflightService } from './preflight.service';\r\nimport { PreflightHub } from './preflight.hub';\r\n\r\nexport const ServicesModule = angular\r\n    .module('preflight.services', [])\r\n    .service(PreflightService.serviceName, PreflightService)\r\n    .service(PreflightHub.serviceName, PreflightHub)\r\n    .name;","﻿export class PreflightHub {\r\n\r\n    static serviceName = 'preflightHub';\r\n\r\n    $rootScope;\r\n    $q;\r\n    assetsService;\r\n\r\n    scripts = [];\r\n    callbacks = [];\r\n\r\n    starting = false\r\n    platform = Umbraco.Sys.ServerVariables.Preflight.Platform;\r\n\r\n    constructor($rootScope, $q, assetsService) {\r\n        this.$rootScope = $rootScope;\r\n        this.$q = $q;\r\n        this.assetsService = assetsService;\r\n\r\n        const umbracoPath = Umbraco.Sys.ServerVariables.umbracoSettings.umbracoPath;\r\n        if (this.platform === 'CORE') {\r\n            this.scripts = [umbracoPath + '/lib/signalr/signalr.min.js'];\r\n        } else {\r\n            this.scripts = [\r\n                umbracoPath + '/lib/signalr/jquery.signalr.js',\r\n                umbracoPath + '/backoffice/signalr/hubs'\r\n            ];\r\n        }\r\n    }\r\n\r\n    setupHub = callback => {\r\n        \r\n        let proxy;\r\n        let hub = {};\r\n\r\n        if (this.platform === 'CORE') {\r\n            $.connection = new signalR.HubConnectionBuilder()\r\n                .withUrl(Umbraco.Sys.ServerVariables.Preflight.signalRHub)\r\n                .withAutomaticReconnect()\r\n                .configureLogging(signalR.LogLevel.Warning)\r\n                .build();\r\n\r\n            proxy = $.connection;\r\n        }\r\n        else {\r\n            proxy = $.connection.preflightHub;\r\n        }\r\n\r\n        if (proxy !== undefined) {\r\n            hub = {\r\n                active: true,\r\n                start: callback => {\r\n                    if (this.platform === 'CORE') {\r\n                        try {\r\n                            proxy.start()\r\n                                .then(() => callback ? callback() : {})\r\n                                .catch(() => console.warn('Failed to start hub'));\r\n                        } catch (e) {\r\n                            console.warn('Could not setup signalR connection', e);\r\n                        }\r\n                    }\r\n                    else {\r\n                        if ($.connection.hub.state !== $.connection.connectionState.disconnected) {\r\n                            $.connection.hub.stop(true, true);\r\n                        }\r\n                        $.connection.hub.start();\r\n                        callback ? callback() : {};\r\n                    }\r\n                },\r\n                on: (eventName, callback) => {\r\n                    proxy.on(eventName, result => {\r\n                        this.$rootScope.$apply(() => {\r\n                            if (callback) {\r\n                                callback(result);\r\n                            }\r\n                        });\r\n                    });\r\n                }\r\n            };\r\n        } else {\r\n            hub = {\r\n                on: () => { },\r\n                start: () => console.warn('No hub to start'),\r\n            };\r\n        }\r\n        \r\n        return callback(hub);\r\n    }\r\n\r\n\r\n    /**\r\n     * Function is common across 472 and 5.0\r\n     * */\r\n    processCallbacks() {\r\n        while (this.callbacks.length) {\r\n            const cb = this.callbacks.pop();\r\n            this.setupHub(cb);\r\n        }\r\n\r\n        this.starting = false;\r\n    }\r\n\r\n    /**\r\n     * Function is common across 472 and 5.0 \r\n     * @param callback\r\n     */\r\n    initHub(callback) {\r\n        this.callbacks.push(callback);\r\n\r\n        if (!this.starting) {\r\n            if ($.connection === undefined) {\r\n                this.starting = true;\r\n\r\n                const promises = [];\r\n                this.scripts.forEach(script => promises.push(this.assetsService.loadJs(script)));\r\n\r\n                this.$q.all(promises).then(() => this.processCallbacks());\r\n            } else {\r\n                this.processCallbacks();\r\n            }\r\n        }\r\n    }\r\n}","﻿export class PreflightService {\r\n\r\n    static serviceName = 'preflightService';\r\n\r\n    $http;\r\n    umbRequestHelper;\r\n\r\n    urlBase = Umbraco.Sys.ServerVariables.Preflight.ApiPath;\r\n\r\n    constructor($http, umbRequestHelper) {\r\n        this.$http = $http;\r\n        this.umbRequestHelper = umbRequestHelper;\r\n    }\r\n\r\n    request = (method, url, data) =>\r\n        this.umbRequestHelper.resourcePromise(\r\n            method === 'GET' ? this.$http.get(this.urlBase + url) : this.$http.post(this.urlBase + url, data),\r\n            'Something broke'\r\n        );\r\n\r\n    check = (id, culture) => this.request('GET', `Check/${id}/${culture} `);\r\n\r\n    checkDirty = data => this.request('POST', `CheckDirty`, data);\r\n\r\n    getSettings = () => this.request('GET', `GetSettings`);\r\n\r\n    saveSettings = (settings, tabs) => this.request('POST', `SaveSettings`, {\r\n        settings,\r\n        tabs\r\n    });\r\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvUHJlZmxpZ2h0L0JhY2tvZmZpY2UvYXBwLmpzIiwic3JjL1ByZWZsaWdodC9CYWNrb2ZmaWNlL2NvbXBvbmVudHMvX2NvbXBvbmVudHNNb2R1bGUuanMiLCJzcmMvUHJlZmxpZ2h0L0JhY2tvZmZpY2UvY29tcG9uZW50cy9jYXJkL2NhcmQuY29tcG9uZW50LmpzIiwic3JjL1ByZWZsaWdodC9CYWNrb2ZmaWNlL2NvbXBvbmVudHMvcHJvZ3Jlc3NjaXJjbGUvcHJvZ3Jlc3NjaXJjbGUuY29tcG9uZW50LmpzIiwic3JjL1ByZWZsaWdodC9CYWNrb2ZmaWNlL2NvbXBvbmVudHMvcmVzdWx0aW50cm8uY29tcG9uZW50LmpzIiwic3JjL1ByZWZsaWdodC9CYWNrb2ZmaWNlL2NvbXBvbmVudHMvc3RhdGVpY29uL3N0YXRlaWNvbi5jb21wb25lbnQuanMiLCJzcmMvUHJlZmxpZ2h0L0JhY2tvZmZpY2UvY29uc3RhbnRzLmpzIiwic3JjL1ByZWZsaWdodC9CYWNrb2ZmaWNlL2NvbnRyb2xsZXJzL19jb250cm9sbGVyc01vZHVsZS5qcyIsInNyYy9QcmVmbGlnaHQvQmFja29mZmljZS9jb250cm9sbGVycy9ub3RpZmljYXRpb24uY29udHJvbGxlci5qcyIsInNyYy9QcmVmbGlnaHQvQmFja29mZmljZS9jb250cm9sbGVycy9wcmVmbGlnaHQuY29udHJvbGxlci5qcyIsInNyYy9QcmVmbGlnaHQvQmFja29mZmljZS9jb250cm9sbGVycy9zZXR0aW5ncy5jb250cm9sbGVyLmpzIiwic3JjL1ByZWZsaWdodC9CYWNrb2ZmaWNlL2ludGVyY2VwdG9ycy9wcmVmbGlnaHQuc2F2ZS5pbnRlcmNlcHRvci5qcyIsInNyYy9QcmVmbGlnaHQvQmFja29mZmljZS9wbHVnaW5zL19wbHVnaW5zTW9kdWxlLmpzIiwic3JjL1ByZWZsaWdodC9CYWNrb2ZmaWNlL3BsdWdpbnMvbGlua2hlYWx0aC9saW5raGVhbHRoLnJlc3VsdC5jb21wb25lbnQuanMiLCJzcmMvUHJlZmxpZ2h0L0JhY2tvZmZpY2UvcGx1Z2lucy9yZWFkYWJpbGl0eS9yZWFkYWJpbGl0eS5wbHVnaW4uY29udHJvbGxlci5qcyIsInNyYy9QcmVmbGlnaHQvQmFja29mZmljZS9yZXNvdXJjZXMvX3NlcnZpY2VzTW9kdWxlLmpzIiwic3JjL1ByZWZsaWdodC9CYWNrb2ZmaWNlL3Jlc291cmNlcy9wcmVmbGlnaHQuaHViLmpzIiwic3JjL1ByZWZsaWdodC9CYWNrb2ZmaWNlL3Jlc291cmNlcy9wcmVmbGlnaHQuc2VydmljZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0FDQUM7O0FBQ0Q7O0FBQ0E7O0FBQ0E7O0FBRUEsSUFBTSxJQUFJLEdBQUcsV0FBYjtBQUVBLE9BQU8sQ0FBQyxNQUFSLENBQWUsSUFBZixFQUFxQixDQUNqQiw4QkFEaUIsRUFFakIsa0NBRmlCLEVBR2pCLG9DQUhpQixFQUlqQiw0QkFKaUIsQ0FBckI7QUFPQSxPQUFPLENBQUMsTUFBUixDQUFlLFNBQWYsRUFBMEIsUUFBMUIsQ0FBbUMsSUFBbkMsQ0FBd0MsSUFBeEM7Ozs7Ozs7Ozs7QUNkQzs7QUFDRDs7QUFDQTs7QUFDQTs7QUFFTyxJQUFNLGdCQUFnQixHQUFHLE9BQU8sQ0FDbEMsTUFEMkIsQ0FDcEIsc0JBRG9CLEVBQ0ksRUFESixFQUUzQixTQUYyQixDQUVqQixvQkFBYyxJQUZHLEVBRUcsbUJBRkgsRUFHM0IsU0FIMkIsQ0FHakIsa0NBQXFCLElBSEosRUFHVSxpQ0FIVixFQUkzQixTQUoyQixDQUlqQiw4QkFBbUIsSUFKRixFQUlRLDZCQUpSLEVBSzNCLFNBTDJCLENBS2pCLHdDQUF3QixJQUxQLEVBS2EsdUNBTGIsRUFNM0IsSUFORTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQ0xBLEk7QUFnQkgsZ0JBQVksbUJBQVosRUFBaUM7QUFBQTs7QUFBQSx1Q0FMckIsTUFLcUI7O0FBQUEsNENBSmhCLFlBSWdCOztBQUFBOztBQUM3QixTQUFLLG1CQUFMLEdB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QUwsR0FBYSxLQUFiO0FBQ0EsT0FBSyxnQkFBTCxHQUF3QixnQkFBeEI7QUFDSCxDOzs7O2dCQVpTLGdCLGlCQUVXLGtCIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwi77u/aW1wb3J0IHsgU2VydmljZXNNb2R1bGUgfSBmcm9tICcuL3Jlc291cmNlcy9fc2VydmljZXNNb2R1bGUnO1xyXG5pbXBvcnQgeyBDb21wb25lbnRzTW9kdWxlIH0gZnJvbSAnLi9jb21wb25lbnRzL19jb21wb25lbnRzTW9kdWxlJztcclxuaW1wb3J0IHsgQ29udHJvbGxlcnNNb2R1bGUgfSBmcm9tICcuL2NvbnRyb2xsZXJzL19jb250cm9sbGVyc01vZHVsZSc7XHJcbmltcG9ydCB7IFBsdWdpbnNNb2R1bGUgfSBmcm9tICcuL3BsdWdpbnMvX3BsdWdpbnNNb2R1bGUnO1xyXG5cclxuY29uc3QgbmFtZSA9ICdwcmVmbGlnaHQnO1xyXG5cclxuYW5ndWxhci5tb2R1bGUobmFtZSwgW1xyXG4gICAgU2VydmljZXNNb2R1bGUsXHJcbiAgICBDb21wb25lbnRzTW9kdWxlLFxyXG4gICAgQ29udHJvbGxlcnNNb2R1bGUsXHJcbiAgICBQbHVnaW5zTW9kdWxlLFxyXG5dKTtcclxuXHJcbmFuZ3VsYXIubW9kdWxlKCd1bWJyYWNvJykucmVxdWlyZXMucHVzaChuYW1lKTsiLCLvu79pbXBvcnQgeyBDYXJkQ29tcG9uZW50IH0gZnJvbSAnLi9jYXJkL2NhcmQuY29tcG9uZW50JztcclxuaW1wb3J0IHsgUHJvZ3Jlc3NDaXJjbGVDb21wb25lbnQgfSBmcm9tICcuL3Byb2dyZXNzY2lyY2xlL3Byb2dyZXNzY2lyY2xlLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFJlc3VsdEludHJvQ29tcG9uZW50IH0gZnJvbSAnLi9yZXN1bHRpbnRyby5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBTdGF0ZUljb25Db21wb25lbnQgfSBmcm9tICcuL3N0YXRlaWNvbi9zdGF0ZWljb24uY29tcG9uZW50JztcclxuXHJcbmV4cG9ydCBjb25zdCBDb21wb25lbnRzTW9kdWxlID0gYW5ndWxhclxyXG4gICAgLm1vZHVsZSgncHJlZmxpZ2h0LmNvbXBvbmVudHMnLCBbXSlcclxuICAgIC5jb21wb25lbnQoQ2FyZENvbXBvbmVudC5uYW1lLCBDYXJkQ29tcG9uZW50KVxyXG4gICAgLmNvbXBvbmVudChSZXN1bHRJbnRyb0NvbXBvbmVudC5uYW1lLCBSZXN1bHRJbnRyb0NvbXBvbmVudClcclxuICAgIC5jb21wb25lbnQoU3RhdGVJY29uQ29tcG9uZW50Lm5hbWUsIFN0YXRlSWNvbkNvbXBvbmVudClcclxuICAgIC5jb21wb25lbnQoUHJvZ3Jlc3NDaXJjbGVDb21wb25lbnQubmFtZSwgUHJvZ3Jlc3NDaXJjbGVDb21wb25lbnQpXHJcbiAgICAubmFtZTsiLCLvu79jbGFzcyBDYXJkIHtcclxuXHJcbiAgICBzdGF0aWMgdGVtcGxhdGUgPSBgXHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQge3sgOjokY3RybC5jYXJkQ2xhc3MgfX1cIj5cclxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJjYXJkLXNjb3JlIHt7IDo6JGN0cmwuY2FyZFNjb3JlQ2xhc3MgfX1cIiBuZy1iaW5kPVwiOjokY3RybC5zY29yZVwiPjwvc3Bhbj5cclxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJjYXJkLXRpdGxlXCI+XHJcbiAgICAgICAgICAgICAgICB7eyA6OiRjdHJsLnRpdGxlIH19PGJyIC8+XHJcbiAgICAgICAgICAgICAgICB7eyA6OiRjdHJsLnN1YnRpdGxlIH19XHJcbiAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICA8L2Rpdj5gO1xyXG5cclxuICAgIGNhcmRDbGFzcyA9ICdwYXNzJztcclxuICAgIGNhcmRTY29yZUNsYXNzID0gJ3Bhc3MtY29sb3InO1xyXG5cclxuICAgIGxvY2FsaXphdGlvblNlcnZpY2U7XHJcblxyXG4gICAgY29uc3RydWN0b3IobG9jYWxpemF0aW9uU2VydmljZSkge1xyXG4gICAgICAgIHRoaXMubG9jYWxpemF0aW9uU2VydmljZSA9IGxvY2FsaXphdGlvblNlcnZpY2U7XHJcbiAgICB9XHJcblxyXG4gICAgJG9uSW5pdCgpIHtcclxuICAgICAgICBpZiAodGhpcy5mYWlsZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5jYXJkQ2xhc3MgPSAnZmFpbCc7XHJcbiAgICAgICAgICAgIHRoaXMuY2FyZFNjb3JlQ2xhc3MgPSAnZmFpbC1jb2xvcic7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy50aXRsZVswXSA9PT0gJ0AnKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9jYWxpemF0aW9uU2VydmljZS5sb2NhbGl6ZSh0aGlzLnRpdGxlLCB0aGlzLnRva2VucylcclxuICAgICAgICAgICAgICAgIC50aGVuKGxvY2FsaXplZFRpdGxlID0+IHRoaXMudGl0bGUgPSBsb2NhbGl6ZWRUaXRsZSk7IFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc3VidGl0bGVbMF0gPT09ICdAJykge1xyXG4gICAgICAgICAgICB0aGlzLmxvY2FsaXphdGlvblNlcnZpY2UubG9jYWxpemUodGhpcy5zdWJ0aXRsZSwgdGhpcy50b2tlbnMpXHJcbiAgICAgICAgICAgICAgICAudGhlbihsb2NhbGl6ZWRTdWJ0aXRsZSA9PiB0aGlzLnN1YnRpdGxlID0gbG9jYWxpemVkU3VidGl0bGUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBDYXJkQ29tcG9uZW50ID0ge1xyXG4gICAgdHJhbnNjbHVkZTogdHJ1ZSwgXHJcbiAgICBuYW1lOiAncHJlZmxpZ2h0Q2FyZCcsXHJcbiAgICBiaW5kaW5nczoge1xyXG4gICAgICAgIHRpdGxlOiAnQD8nLFxyXG4gICAgICAgIHN1YnRpdGxlOiAnQD8nLFxyXG4gICAgICAgIGZhaWxlZDogJzwnLFxyXG4gICAgICAgIHNjb3JlOiAnPCcsXHJcbiAgICAgICAgdG9rZW5zOiAnPCdcclxuICAgIH0sXHJcbiAgICB0ZW1wbGF0ZTogQ2FyZC50ZW1wbGF0ZSxcclxuICAgIGNvbnRyb2xsZXI6IENhcmRcclxufTtcclxuIiwi77u/Y2xhc3MgUHJvZ3Jlc3NDaXJjbGUge1xuXG4gICAgc3RhdGljIHRlbXBsYXRlID0gYFxuICAgICAgICA8ZGl2IGNsYXNzPVwidW1iLXByb2dyZXNzLWNpcmNsZSBwcmVmbGlnaHQtcHJvZ3Jlc3MtY2lyY2xlXCIgbmctc3R5bGU9XCJ7J3dpZHRoJzogJGN0cmwuc2l6ZSwgJ2hlaWdodCc6ICRjdHJsLnNpemUgfVwiPlxuICAgICAgICAgICAgPHN2ZyBjbGFzcz1cInVtYi1wcm9ncmVzcy1jaXJjbGVfX3ZpZXctYm94XCIgdmlld0JveD1cIjAgMCAzMy44MzA5ODg2MiAzMy44MzA5ODg2MlwiPiBcbiAgICAgICAgICAgICAgICA8Y2lyY2xlIGNsYXNzPVwidW1iLXByb2dyZXNzLWNpcmNsZV9faGlnaGxpZ2h0LS17eyAkY3RybC5iYWNrZ3JvdW5kIH19XCIgY3g9XCIxNi45MTU0OTQzMVwiIGN5PVwiMTYuOTE1NDk0MzFcIiByPVwiMTUuOTE1NDk0MzFcIiBmaWxsPVwibm9uZVwiIHN0cm9rZS13aWR0aD1cIi41XCI+PC9jaXJjbGU+XG4gICAgICAgICAgICAgICAgPGNpcmNsZSBjbGFzcz1cInVtYi1wcm9ncmVzcy1jaXJjbGVfX2hpZ2hsaWdodCB1bWItcHJvZ3Jlc3MtY2lyY2xlX19oaWdobGlnaHQtLXt7ICRjdHJsLmZvcmVncm91bmQgfX1cIlxuICAgICAgICAgICAgICAgICAgICBjeD1cIjE2LjkxNTQ5NDMxXCIgY3k9XCIxNi45MTU0OTQzMVwiIHI9XCIxNS45MTU0OTQzMVwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBmaWxsPVwibm9uZVwiIHN0cm9rZS13aWR0aD1cIjJcIiBzdHJva2UtZGFzaGFycmF5PVwie3sgJGN0cmwuZGFzaEFycmF5IH19XCI+PC9jaXJjbGU+XG4gICAgICAgICAgICA8L3N2Zz4gXG4gICAgICAgICAgICA8ZGl2IG5nLXN0eWxlPVwieydmb250LXNpemUnOiAkY3RybC5wZXJjZW50YWdlU2l6ZX1cIiBjbGFzcz1cInVtYi1wcm9ncmVzcy1jaXJjbGVfX3BlcmNlbnRhZ2VcIj5cbiAgICAgICAgICAgICAgICB7eyAkY3RybC5sYWJlbCB9fVxuICAgICAgICAgICAgICAgIDxzbWFsbD5wYXNzIHJhdGU8L3NtYWxsPiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5gO1xuXG4gICAgcjtcbiAgICAkZWxlbWVudDtcblxuICAgIGNvbnN0cnVjdG9yKCRlbGVtZW50KSB7XG4gICAgICAgIHRoaXMuciA9ICRlbGVtZW50LmZpbmQoJy51bWItcHJvZ3Jlc3MtY2lyY2xlX19oaWdobGlnaHQnKS5hdHRyKCdyJyk7XHJcbiAgICB9XG5cbiAgICAkb25DaGFuZ2VzID0gKCkgPT4ge1xuICAgICAgICB0aGlzLmRyYXcoKTtcclxuICAgIH1cblxuICAgIGRyYXcgPSAoKSA9PiB7XG4gICAgICAgIGxldCBwZXJjZW50ID0gTWF0aC5yb3VuZCh0aGlzLnBlcmNlbnRhZ2UpO1xuICAgICAgICBwZXJjZW50ID0gcGVyY2VudCA+IDEwMCA/IDEwMCA6IHBlcmNlbnQgfHwgMDtcblxuICAgICAgICAvLyBjYWxjdWxhdGluZyB0aGUgY2lyY2xlJ3MgaGlnaGxpZ2h0XG4gICAgICAgIGNvbnN0IHBhdGhMZW5ndGggPSB0aGlzLnIgKiBNYXRoLlBJICogMiAqIHBlcmNlbnQgLyAxMDA7XG5cbiAgICAgICAgLy8gRnVsbCBjaXJjbGUgbGVuZ3RoXG4gICAgICAgIHRoaXMuZGFzaEFycmF5ID0gYCR7cGF0aExlbmd0aH0sMTAwYDtcblxuICAgICAgICAvLyBzZXQgZm9udCBzaXplXG4gICAgICAgIHRoaXMucGVyY2VudGFnZVNpemUgPSB0aGlzLnNpemUgKiAwLjMgKyAncHgnO1xuXG4gICAgICAgIC8vIHVzZSByb3VuZGVkIHBlcmNlbnRhZ2VcbiAgICAgICAgdGhpcy5sYWJlbCA9IGAke3BlcmNlbnR9JWA7XHJcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBQcm9ncmVzc0NpcmNsZUNvbXBvbmVudCA9IHtcclxuICAgIHRyYW5zY2x1ZGU6IHRydWUsXHJcbiAgICBuYW1lOiAncHJvZ3Jlc3NDaXJjbGUnLFxyXG4gICAgYmluZGluZ3M6IHtcclxuICAgICAgICBzaXplOiAnQD8nLFxuICAgICAgICBwZXJjZW50YWdlOiAnPCcsXG4gICAgICAgIGRvbmU6ICdAJyxcbiAgICAgICAgZm9yZWdyb3VuZDogJ0AnLFxuICAgICAgICBiYWNrZ3JvdW5kOiAnQCdcclxuICAgIH0sXHJcbiAgICB0ZW1wbGF0ZTogUHJvZ3Jlc3NDaXJjbGUudGVtcGxhdGUsXHJcbiAgICBjb250cm9sbGVyOiBQcm9ncmVzc0NpcmNsZVxyXG59O1xyXG4iLCLvu79jbGFzcyBSZXN1bHRJbnRybyB7XHJcbiAgICAvKipcclxuICAgICAqIERpcmVjdGl2ZSB1c2VkIHRvIHJlbmRlciB0aGUgaGVhZGluZyBmb3IgYSBwbHVnaW4gaW4gdGhlIHJlc3VsdHMgdmlld1xyXG4gICAgICogU2VuZCBhIHN0cmluZ2lmaWVkIGFycmF5IGFzIHRoZSB0b2tlbnMgYXR0cmlidXRlIHRvIHJlcGxhY2UgJTAlLCAlMSUgLi4gJW4lIGluIHRoZSBsb2NhbGl6ZWQgc3RyaW5nXHJcbiAgICAgKi9cclxuXHJcbiAgICBzdGF0aWMgdGVtcGxhdGUgPSBgXHJcbiAgICAgICAgPGg1IG5nLWJpbmQ9XCI6OiRjdHJsLmhlYWRpbmdcIiBjbGFzcz1cIm10MFwiPjwvaDU+XHJcbiAgICAgICAgPHNwYW4gbmctaWY9XCIkY3RybC5wYXNzXCIgbmctYmluZD1cIjo6JGN0cmwucGFzc1RleHRcIj48L3NwYW4+YDtcclxuXHJcbiAgICBsb2NhbGl6YXRpb25TZXJ2aWNlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGxvY2FsaXphdGlvblNlcnZpY2UpIHtcclxuICAgICAgICB0aGlzLmxvY2FsaXphdGlvblNlcnZpY2UgPSBsb2NhbGl6YXRpb25TZXJ2aWNlO1xyXG4gICAgfVxyXG5cclxuICAgICRvbkluaXQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucGFzc1RleHRbMF0gPT09ICdAJykge1xyXG4gICAgICAgICAgICB0aGlzLmxvY2FsaXphdGlvblNlcnZpY2UubG9jYWxpemUodGhpcy5wYXNzVGV4dCwgdGhpcy50b2tlbnMpXHJcbiAgICAgICAgICAgICAgICAudGhlbihsb2NhbGl6ZWRQYXNzVGV4dCA9PiB0aGlzLnBhc3NUZXh0ID0gbG9jYWxpemVkUGFzc1RleHQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaGVhZGluZ1swXSA9PT0gJ0AnKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9jYWxpemF0aW9uU2VydmljZS5sb2NhbGl6ZSh0aGlzLmhlYWRpbmcsIHRoaXMudG9rZW5zKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4obG9jYWxpemVkSGVhZGluZyA9PiB0aGlzLmhlYWRpbmcgPSBsb2NhbGl6ZWRIZWFkaW5nKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgUmVzdWx0SW50cm9Db21wb25lbnQgPSB7XHJcbiAgICB0cmFuc2NsdWRlOiB0cnVlLFxyXG4gICAgbmFtZTogJ3ByZWZsaWdodFJlc3VsdEludHJvJyxcclxuICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgdG9rZW5zOiAnPCcsXHJcbiAgICAgICAgcGFzc1RleHQ6ICdAPycsXHJcbiAgICAgICAgaGVhZGluZzogJ0A/JyxcclxuICAgICAgICBwYXNzOiAnPCdcclxuICAgIH0sXHJcbiAgICB0ZW1wbGF0ZTogUmVzdWx0SW50cm8udGVtcGxhdGUsXHJcbiAgICBjb250cm9sbGVyOiBSZXN1bHRJbnRyb1xyXG59OyIsIu+7v2NsYXNzIFN0YXRlSWNvbiB7XHJcblxyXG4gICAgc3RhdGljIHRlbXBsYXRlID0gYFxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJzdGF0ZS1pY29uIHt7IDo6JGN0cmwuY2xhc3NOYW1lIH19XCI+XHJcbiAgICAgICAgICAgIDx1bWItaWNvbiBpY29uPVwiaWNvbi17eyA6OiRjdHJsLmljb24gfX1cIj48L3VtYi1pY29uPlxyXG4gICAgICAgIDwvZGl2PmA7XHJcblxyXG4gICAgaWNvbiA9ICdwb3dlcic7XHJcbiAgICBjbGFzc05hbWUgPSAnZGlzYWJsZWQnO1xyXG5cclxuICAgICRvbkluaXQoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmRpc2FibGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaWNvbiA9IHRoaXMuZmFpbGVkID8gJ2RlbGV0ZScgOiAnY2hlY2snO1xyXG4gICAgICAgICAgICB0aGlzLmNsYXNzTmFtZSA9IHRoaXMuZmFpbGVkID8gJ2ZhaWwnIDogJ3Bhc3MnO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBTdGF0ZUljb25Db21wb25lbnQgPSB7XHJcbiAgICB0cmFuc2NsdWRlOiB0cnVlLFxyXG4gICAgbmFtZTogJ3ByZWZsaWdodFN0YXRlSWNvbicsXHJcbiAgICBiaW5kaW5nczoge1xyXG4gICAgICAgIGZhaWxlZDogJzwnLFxyXG4gICAgICAgIGRpc2FibGVkOiAnPCdcclxuICAgIH0sXHJcbiAgICB0ZW1wbGF0ZTogU3RhdGVJY29uLnRlbXBsYXRlLFxyXG4gICAgY29udHJvbGxlcjogU3RhdGVJY29uLFxyXG59O1xyXG4iLCLvu79leHBvcnQgY29uc3QgY29uc3RhbnRzID0ge1xyXG4gICAgY2hlY2tib3hsaXN0OiAnY2hlY2tib3hsaXN0JyxcclxuICAgIG11bHRpcGxldGV4dGJveDogJ211bHRpcGxldGV4dGJveCcsXHJcbn0iLCLvu79pbXBvcnQgeyBQcmVmbGlnaHRDb250cm9sbGVyIH0gZnJvbSAnLi9wcmVmbGlnaHQuY29udHJvbGxlcic7XHJcbmltcG9ydCB7IE5vdGlmaWNhdGlvbkNvbnRyb2xsZXIgfSBmcm9tICcuL25vdGlmaWNhdGlvbi5jb250cm9sbGVyJztcclxuaW1wb3J0IHsgU2V0dGluZ3NDb250cm9sbGVyIH0gZnJvbSAnLi9zZXR0aW5ncy5jb250cm9sbGVyJztcclxuXHJcbmV4cG9ydCBjb25zdCBDb250cm9sbGVyc01vZHVsZSA9IGFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ3ByZWZsaWdodC5jb250cm9sbGVycycsIFtdKVxyXG4gICAgLmNvbnRyb2xsZXIoUHJlZmxpZ2h0Q29udHJvbGxlci5jb250cm9sbGVyTmFtZSwgUHJlZmxpZ2h0Q29udHJvbGxlcilcclxuICAgIC5jb250cm9sbGVyKE5vdGlmaWNhdGlvbkNvbnRyb2xsZXIuY29udHJvbGxlck5hbWUsIE5vdGlmaWNhdGlvbkNvbnRyb2xsZXIpXHJcbiAgICAuY29udHJvbGxlcihTZXR0aW5nc0NvbnRyb2xsZXIuY29udHJvbGxlck5hbWUsIFNldHRpbmdzQ29udHJvbGxlcilcclxuICAgIC5uYW1lOyIsIu+7v2V4cG9ydCBjbGFzcyBOb3RpZmljYXRpb25Db250cm9sbGVyIHtcclxuXHJcbiAgICBzdGF0aWMgY29udHJvbGxlck5hbWUgPSAncHJlZmxpZ2h0Lm5vdGlmaWNhdGlvbi5jb250cm9sbGVyJztcclxuXHJcbiAgICBzYXZlQ2FuY2VsbGVkO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgIH1cclxufVxyXG4iLCLvu79leHBvcnQgY2xhc3MgUHJlZmxpZ2h0Q29udHJvbGxlciB7XHJcblxyXG4gICAgc3RhdGljIGNvbnRyb2xsZXJOYW1lID0gJ3ByZWZsaWdodC5jb250cm9sbGVyJztcclxuXHJcbiAgICAkc2NvcGU7XHJcbiAgICAkcm9vdFNjb3BlO1xyXG4gICAgJGVsZW1lbnQ7XHJcbiAgICAkdGltZW91dDtcclxuICAgIGVkaXRvclN0YXRlO1xyXG4gICAgcHJlZmxpZ2h0U2VydmljZTtcclxuICAgIHByZWZsaWdodEh1YjtcclxuXHJcbiAgICBkaXJ0eUhhc2hlcyA9IHt9O1xyXG4gICAgdmFsaWRQcm9wVHlwZXM7XHJcbiAgICBwcm9wc0JlaW5nQ2hlY2tlZCA9IFtdO1xyXG4gICAgcHJvcGVydGllc1RvVHJhY2sgPSBbXTtcclxuICAgIGRpcnR5UHJvcHMgPSBbXTtcclxuXHJcbiAgICByZXN1bHRzID0ge1xyXG4gICAgICAgIHByb3BlcnRpZXM6IFtdXHJcbiAgICB9O1xyXG5cclxuICAgIGpzb25Qcm9wZXJ0aWVzID0gW1xyXG4gICAgICAgICdVbWJyYWNvLkdyaWQnLFxyXG4gICAgICAgICdVbWJyYWNvLk5lc3RlZENvbnRlbnQnLFxyXG4gICAgXTtcclxuXHJcbiAgICBibG9ja0xpc3RFZGl0b3JBbGlhcyA9ICdVbWJyYWNvLkJsb2NrTGlzdCc7XHJcblxyXG4gICAgbm9UZXN0cyA9IGZhbHNlO1xyXG4gICAgcGVyY2VudGFnZURvbmUgPSAyMDtcclxuICAgIHByb2dyZXNzU3RlcCA9IDA7XHJcbiAgICBhY3RpdmVWYXJpYW50O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCRzY29wZSwgJHJvb3RTY29wZSwgJGVsZW1lbnQsICR0aW1lb3V0LCBlZGl0b3JTdGF0ZSwgcHJlZmxpZ2h0U2VydmljZSwgcHJlZmxpZ2h0SHViKSB7XHJcbiAgICAgICAgdGhpcy4kc2NvcGUgPSAkc2NvcGU7XHJcbiAgICAgICAgdGhpcy4kcm9vdFNjb3BlID0gJHJvb3RTY29wZTtcclxuICAgICAgICB0aGlzLiRlbGVtZW50ID0gJGVsZW1lbnQ7XHJcbiAgICAgICAgdGhpcy4kdGltZW91dCA9ICR0aW1lb3V0O1xyXG4gICAgICAgIHRoaXMuZWRpdG9yU3RhdGUgPSBlZGl0b3JTdGF0ZTtcclxuICAgICAgICB0aGlzLnByZWZsaWdodFNlcnZpY2UgPSBwcmVmbGlnaHRTZXJ2aWNlO1xyXG4gICAgICAgIHRoaXMucHJlZmxpZ2h0SHViID0gcHJlZmxpZ2h0SHViO1xyXG5cclxuICAgICAgICB0aGlzLnZhbGlkUHJvcFR5cGVzID0gVW1icmFjby5TeXMuU2VydmVyVmFyaWFibGVzLlByZWZsaWdodC5Qcm9wZXJ0eVR5cGVzVG9DaGVjaztcclxuXHJcbiAgICAgICAgdGhpcy4kc2NvcGUubW9kZWwuYmFkZ2UgPSB7XHJcbiAgICAgICAgICAgIHR5cGU6ICdpbmZvJ1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICRyb290U2NvcGUuJG9uKCdhcHAudGFiQ2hhbmdlJywgKGUsIGRhdGEpID0+IHtcclxuICAgICAgICAgICAgaWYgKGRhdGEuYWxpYXMgPT09ICdwcmVmbGlnaHQnKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBjb2xsYXBzZSBvcGVuIG5jIGNvbnRyb2xzLCB0aW1lb3V0cyBwcmV2ZW50ICRhcHBseSBlcnJvcnNcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IG9wZW5OYyBvZiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudW1iLW5lc3RlZC1jb250ZW50X19pdGVtLS1hY3RpdmUgLnVtYi1uZXN0ZWQtY29udGVudF9faGVhZGVyLWJhcicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHRpbWVvdXQoKCkgPT4gb3Blbk5jLmNsaWNrKCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICR0aW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoZWNrRGlydHkoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEJhZGdlQ291bnQoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICRyb290U2NvcGUuJG9uKCdzaG93UHJlZmxpZ2h0JywgKGV2ZW50LCBkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChkYXRhLm5vZGVJZCA9PT0gJHNjb3BlLmNvbnRlbnQuaWQpIHtcclxuICAgICAgICAgICAgICAgIC8vIG5lZWRzIHRvIGZpbmQgYXBwIGNsb3Nlc3QgdG8gY3VycmVudCBzY29wZVxyXG4gICAgICAgICAgICAgICAgY29uc3QgYXBwTGluayA9ICRlbGVtZW50LmNsb3Nlc3QoJ2Zvcm0nKS5maW5kKCdbZGF0YS1lbGVtZW50PVwic3ViLXZpZXctcHJlZmxpZ2h0XCJdJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGFwcExpbmspIHtcclxuICAgICAgICAgICAgICAgICAgICBhcHBMaW5rLmNsaWNrKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSB7YW55fSBhcnJcclxuICAgICAqL1xyXG4gICAgam9pbkxpc3QgPSBhcnIgPT4ge1xyXG4gICAgICAgIGxldCBvdXRTdHI7XHJcbiAgICAgICAgaWYgKGFyci5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgb3V0U3RyID0gYXJyWzBdO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoYXJyLmxlbmd0aCA9PT0gMikge1xyXG4gICAgICAgICAgICBvdXRTdHIgPSBhcnIuam9pbignIGFuZCAnKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGFyci5sZW5ndGggPiAyKSB7XHJcbiAgICAgICAgICAgIG91dFN0ciA9IGFyci5zbGljZSgwLCAtMSkuam9pbignLCAnKSArICcsIGFuZCAnICsgYXJyLnNsaWNlKC0xKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBvdXRTdHI7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnZlcnQgYSBzdHJpbmcgdG8gYSBoYXNoIGZvciBzdG9yYWdlIGFuZCBjb21wYXJpc29uLlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHMgLSB0aGUgc3RyaW5nIHRvIGhhc2hpZnlcclxuICAgICAqIEByZXR1cm5zIHtpbnR9IHRoZSBnZW5lcmF0ZWQgaGFzaFxyXG4gICAgICovXHJcbiAgICBnZXRIYXNoID0gcyA9PiBzID8gcy5zcGxpdCgnJykucmVkdWNlKChhLCBiKSA9PiB7XHJcbiAgICAgICAgYSA9IChhIDw8IDUpIC0gYSArIGIuY2hhckNvZGVBdCgwKTtcclxuICAgICAgICByZXR1cm4gYSAmIGE7XHJcbiAgICB9LCAwKSA6IDE7XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IHByb3BlcnR5IGJ5IGFsaWFzIGZyb20gdGhlIGN1cnJlbnQgdmFyaWFudFxyXG4gICAgICogQHBhcmFtIHthbnl9IGFsaWFzXHJcbiAgICAgKi9cclxuICAgIGdldFByb3BlcnR5ID0gYWxpYXMgPT4ge1xyXG4gICAgICAgIGZvciAobGV0IHRhYiBvZiB0aGlzLmVkaXRvclN0YXRlLmN1cnJlbnQudmFyaWFudHMuZmluZCh4ID0+IHguYWN0aXZlKS50YWJzKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IHByb3Agb2YgdGFiLnByb3BlcnRpZXMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChwcm9wLmFsaWFzID09PSBhbGlhcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9wO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSB7YW55fSBlZGl0b3JcclxuICAgICAqL1xyXG4gICAgb25Db21wbGV0ZSA9ICgpID0+IHtcclxuICAgICAgICAvLyBpdCdzIHBvc3NpYmxlIG5vIHRlc3RzIHJhbiwgaW4gd2hpY2ggY2FzZSByZXN1bHRzIHdvbid0IGV4aXN0XHJcbiAgICAgICAgdGhpcy5ub1Rlc3RzID0gdGhpcy5yZXN1bHRzLnByb3BlcnRpZXMuZXZlcnkoeCA9PiAheC5wbHVnaW5zLmxlbmd0aCk7XHJcbiAgICAgICAgaWYgKHRoaXMubm9UZXN0cykge1xyXG4gICAgICAgICAgICB0aGlzLiRzY29wZS5tb2RlbC5iYWRnZSA9IHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAobGV0IHAgb2YgdGhpcy5yZXN1bHRzLnByb3BlcnRpZXMpIHtcclxuICAgICAgICAgICAgcC5kaXNhYmxlZCA9IHAuZmFpbGVkQ291bnQgPT09IC0xO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5zaG93U3VjY2Vzc01lc3NhZ2UgPSAhdGhpcy5yZXN1bHRzLmZhaWxlZCAmJiAhdGhpcy5ub1Rlc3RzO1xyXG4gICAgICAgIHRoaXMuZG9uZSA9IHRydWU7XHJcbiAgICB9OyBcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGVzIHRoZSBiYWRnZSBpbiB0aGUgaGVhZGVyIHdpdGggdGhlIG51bWJlciBvZiBmYWlsZWQgdGVzdHNcclxuICAgICAqL1xyXG4gICAgc2V0QmFkZ2VDb3VudCA9IHBlbmRpbmcgPT4ge1xyXG4gICAgICAgIGlmIChwZW5kaW5nKSB7XHJcbiAgICAgICAgICAgIHRoaXMuJHNjb3BlLm1vZGVsLmJhZGdlID0ge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogJ3dhcm5pbmcnXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnJlc3VsdHMgJiYgdGhpcy5yZXN1bHRzLmZhaWxlZENvdW50ID4gMCkge1xyXG4gICAgICAgICAgICB0aGlzLiRzY29wZS5tb2RlbC5iYWRnZSA9IHtcclxuICAgICAgICAgICAgICAgIGNvdW50OiB0aGlzLnJlc3VsdHMuZmFpbGVkQ291bnQsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnYWxlcnQgLS1lcnJvci1iYWRnZSBwZi1ibG9jaydcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLiRzY29wZS5tb2RlbC5iYWRnZSA9IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdzdWNjZXNzIGljb24tJ1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogaWYgbm9kZSBpcyBpbnZhcmlhbnQsIHNlbmQgbm8gY3VsdHVyZSwgb3RoZXJ3aXNlIGdldCBmcm9tIGxhbmd1YWdlLm5hbWUgb24gdGhlIGFjdGl2ZSB2YXJpYW50XHJcbiAgICAgKiAqL1xyXG4gICAgZ2V0Q3VycmVudEN1bHR1cmUgPSAoKSA9PiB0aGlzLmFjdGl2ZVZhcmlhbnQubGFuZ3VhZ2UgPyB0aGlzLmFjdGl2ZVZhcmlhbnQubGFuZ3VhZ2UuY3VsdHVyZSA6ICcnO1xyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIFVwZGF0ZXMgdGhlIHByb3BlcnR5IHNldCB3aXRoIHRoZSBuZXcgdmFsdWUsIGFuZCByZW1vdmVzIGFueSB0ZW1wb3JhcnkgcHJvcGVydHkgZnJvbSB0aGF0IHNldFxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSBhIHJlc3BvbnNlIG1vZGVsIGl0ZW0gcmV0dXJuZWQgdmlhIHRoZSBzaWduYWxyIGh1YlxyXG4gICAgICovXHJcbiAgICByZWJpbmRSZXN1bHQgPSBkYXRhID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhkYXRhLmxhYmVsLCBkYXRhKTtcclxuICAgICAgICBsZXQgbmV3UHJvcCA9IHRydWU7XHJcbiAgICAgICAgbGV0IHRvdGFsVGVzdHNSdW4gPSAwO1xyXG4gICAgICAgIGxldCBleGlzdGluZ1Byb3AgPSB0aGlzLnJlc3VsdHMucHJvcGVydGllcy5maW5kKHggPT4geC5sYWJlbCA9PT0gZGF0YS5sYWJlbCk7XHJcblxyXG4gICAgICAgIGlmIChleGlzdGluZ1Byb3ApIHtcclxuICAgICAgICAgICAgZXhpc3RpbmdQcm9wID0gT2JqZWN0LmFzc2lnbihleGlzdGluZ1Byb3AsIGRhdGEpO1xyXG4gICAgICAgICAgICBleGlzdGluZ1Byb3AubG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBuZXdQcm9wID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBhIG5ldyBwcm9wZXJ0eSB3aWxsIGhhdmUgYSB0ZW1wb3JhcnkgcGxhY2Vob2xkZXIgLSByZW1vdmUgaXRcclxuICAgICAgICAvLyBfdGVtcCBlbnN1cmVzIGdyaWQgd2l0aCBtdWx0aXBsZSBlZGl0b3JzIG9ubHkgcmVtb3ZlcyB0aGUgY29ycmVjdCB0ZW1wIGVudHJ5XHJcbiAgICAgICAgaWYgKG5ld1Byb3AgJiYgIWRhdGEucmVtb3ZlICYmIGRhdGEuZmFpbGVkQ291bnQgIT09IC0xKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRlbXBJbmRleCA9IHRoaXMucmVzdWx0cy5wcm9wZXJ0aWVzLmZpbmRJbmRleChwID0+IHAubmFtZSA9PT0gYCR7ZGF0YS5uYW1lfV90ZW1wYCk7XHJcbiAgICAgICAgICAgIGlmICh0ZW1wSW5kZXggIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc3VsdHMucHJvcGVydGllcy5zcGxpY2UodGVtcEluZGV4LCAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnJlc3VsdHMucHJvcGVydGllcy5wdXNoKGRhdGEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5yZXN1bHRzLnByb3BlcnRpZXMgPSB0aGlzLnJlc3VsdHMucHJvcGVydGllcy5maWx0ZXIoeCA9PiB4LnJlbW92ZSA9PT0gZmFsc2UpO1xyXG4gICAgICAgIHRoaXMucmVzdWx0cy5wcm9wZXJ0aWVzID0gdGhpcy5yZXN1bHRzLnByb3BlcnRpZXMuZmlsdGVyKHggPT4geC5mYWlsZWRDb3VudCA+IC0xKTtcclxuXHJcbiAgICAgICAgdGhpcy5yZXN1bHRzLmZhaWxlZENvdW50ID0gdGhpcy5yZXN1bHRzLnByb3BlcnRpZXMucmVkdWNlKChwcmV2LCBjdXIpID0+IHtcclxuICAgICAgICAgICAgdG90YWxUZXN0c1J1biArPSBjdXIudG90YWxUZXN0cztcclxuICAgICAgICAgICAgcmV0dXJuIHByZXYgKyBjdXIuZmFpbGVkQ291bnQ7XHJcbiAgICAgICAgfSwgMCk7XHJcblxyXG4gICAgICAgIHRoaXMucmVzdWx0cy5mYWlsZWQgPSB0aGlzLnJlc3VsdHMuZmFpbGVkQ291bnQgPiAwO1xyXG4gICAgICAgIHRoaXMucHJvcHNCZWluZ0NoZWNrZWRTdHIgPSB0aGlzLmpvaW5MaXN0KHRoaXMucHJvcHNCZWluZ0NoZWNrZWQuc3BsaWNlKHRoaXMucHJvcHNCZWluZ0NoZWNrZWQuaW5kZXhPZihkYXRhLm5hbWUpLCAxKSk7XHJcbiAgICAgICAgdGhpcy5wZXJjZW50YWdlRmFpbGVkID0gKHRvdGFsVGVzdHNSdW4gLSB0aGlzLnJlc3VsdHMuZmFpbGVkQ291bnQpIC8gdG90YWxUZXN0c1J1biAqIDEwMDtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRmluZHMgZGlydHkgY29udGVudCBwcm9wZXJ0aWVzLCBjaGVja3MgdGhlIHR5cGUgYW5kIGJ1aWxkcyBhIGNvbGxlY3Rpb24gb2Ygc2ltcGxlIG1vZGVscyBmb3IgcG9zdGluZyB0byB0aGUgcHJlZmxpZ2h0IGNoZWNrZGlydHkgZW5kcG9pbnRcclxuICAgICAqIEFsc28gZ2VuZXJhdGVzIGFuZCBzdG9yZXMgYSBoYXNoIG9mIHRoZSBwcm9wZXJ0eSB2YWx1ZSBmb3IgY29tcGFyaXNvbiBvbiBzdWJzZXF1ZW50IGNhbGxzLCB0byBwcmV2ZW50IHJlLWZldGNoaW5nIHVuY2hhbmdlZCBkYXRhXHJcbiAgICAgKi9cclxuICAgIGNoZWNrRGlydHkgPSAoKSA9PiB7XHJcblxyXG4gICAgICAgIHRoaXMuZGlydHlQcm9wcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuaGFzRGlydHkgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgcHJvcCBvZiB0aGlzLnByb3BlcnRpZXNUb1RyYWNrKSB7XHJcbiAgICAgICAgICAgIGxldCBjdXJyZW50VmFsdWUgPSB0aGlzLmdldFByb3BlcnR5KHByb3AuYWxpYXMpLnZhbHVlO1xyXG5cclxuICAgICAgICAgICAgaWYgKHByb3AuZWRpdG9yID09PSB0aGlzLmJsb2NrTGlzdEVkaXRvckFsaWFzKSB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50VmFsdWUgPSBKU09OLnN0cmluZ2lmeShjdXJyZW50VmFsdWUuY29udGVudERhdGEpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudFZhbHVlID0gdGhpcy5qc29uUHJvcGVydGllcy5pbmNsdWRlcyhwcm9wLmVkaXRvcikgPyBKU09OLnN0cmluZ2lmeShjdXJyZW50VmFsdWUpIDogY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBoYXNoID0gdGhpcy5nZXRIYXNoKGN1cnJlbnRWYWx1ZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5kaXJ0eUhhc2hlc1twcm9wLmxhYmVsXSAmJiB0aGlzLmRpcnR5SGFzaGVzW3Byb3AubGFiZWxdICE9PSBoYXNoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5kaXJ0eVByb3BzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHByb3AubGFiZWwsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGN1cnJlbnRWYWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICBlZGl0b3I6IHByb3AuZWRpdG9yXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpcnR5SGFzaGVzW3Byb3AubGFiZWxdID0gaGFzaDtcclxuICAgICAgICAgICAgICAgIHRoaXMuaGFzRGlydHkgPSB0cnVlO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLmRpcnR5SGFzaGVzW3Byb3AubGFiZWxdKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpcnR5SGFzaGVzW3Byb3AubGFiZWxdID0gaGFzaDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gaWYgZGlydHkgcHJvcGVydGllcyBleGlzdCwgY3JlYXRlIGEgc2ltcGxlIG1vZGVsIGZvciBlYWNoIGFuZCBzZW5kIHRoZSBsb3Qgb2ZmIGZvciBjaGVja2luZ1xyXG4gICAgICAgIC8vIHJlc3BvbnNlIGNvbWVzIHZpYSB0aGUgc2lnbmFsciBodWIgc28gaXMgbm90IGhhbmRsZWQgaGVyZVxyXG4gICAgICAgIGlmICh0aGlzLmhhc0RpcnR5KSB7XHJcbiAgICAgICAgICAgIHRoaXMuJHRpbWVvdXQoKCkgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuZGlydHlQcm9wcy5mb3JFYWNoKHByb3AgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGV4aXN0aW5nIG9mIHRoaXMucmVzdWx0cy5wcm9wZXJ0aWVzLmZpbHRlcihwID0+IHAubmFtZSA9PT0gcHJvcC5uYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXhpc3RpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nLm9wZW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nLmZhaWxlZENvdW50ID0gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBnZW5lcmF0ZSBuZXcgcGxhY2Vob2xkZXIgZm9yIHBlbmRpbmcgcmVzdWx0cyAtIHRoaXMgaXMgcmVtb3ZlZCB3aGVuIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXN1bHRzLnByb3BlcnRpZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IHByb3AubmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWlsZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhaWxlZENvdW50OiAtMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBgJHtwcm9wLm5hbWV9X3RlbXBgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wc0JlaW5nQ2hlY2tlZC5wdXNoKHByb3AubmFtZSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzQmVpbmdDaGVja2VkU3RyID0gdGhpcy5qb2luTGlzdCh0aGlzLnByb3BzQmVpbmdDaGVja2VkKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBwYXlsb2FkID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IHRoaXMuZGlydHlQcm9wcyxcclxuICAgICAgICAgICAgICAgICAgICBjdWx0dXJlOiB0aGlzLmdldEN1cnJlbnRDdWx0dXJlKCksXHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHRoaXMuZWRpdG9yU3RhdGUuY3VycmVudC5pZFxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldEJhZGdlQ291bnQodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLnByZWZsaWdodFNlcnZpY2UuY2hlY2tEaXJ0eShwYXlsb2FkKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEluaXRpYXRlcyB0aGUgc2lnbmFsciBodWIgZm9yIHJldHVybmluZyB0ZXN0IHJlc3VsdHNcclxuICAgICAqL1xyXG4gICAgaW5pdFNpZ25hbFIgPSAoKSA9PiB7XHJcblxyXG4gICAgICAgIHRoaXMucHJlZmxpZ2h0SHViLmluaXRIdWIoaHViID0+IHtcclxuXHJcbiAgICAgICAgICAgIGh1Yi5vbigncHJlZmxpZ2h0VGVzdCcsXHJcbiAgICAgICAgICAgICAgICBlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlYmluZFJlc3VsdChlKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEJhZGdlQ291bnQoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgaHViLm9uKCdwcmVmbGlnaHRDb21wbGV0ZScsXHJcbiAgICAgICAgICAgICAgICAoKSA9PiB0aGlzLm9uQ29tcGxldGUoKVxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgaHViLnN0YXJ0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICogQ2hlY2sgYWxsIHByb3BlcnRpZXMgd2hlbiB0aGUgY29udHJvbGxlciBsb2Fkcy4gV29uJ3QgcmUtcnVuIHdoZW4gY2hhbmdpbmcgYmV0d2VlbiBhcHBzXHJcbiAgICAgICAgICAgICAgICAgKiBidXQgbmVlZHMgdG8gaGFwcGVuIGFmdGVyIHRoZSBodWIgbG9hZHNcclxuICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kdGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRCYWRnZUNvdW50KHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tEaXJ0eSgpOyAvLyBidWlsZHMgaW5pdGlhbCBoYXNoIGFycmF5LCBidXQgd29uJ3QgcnVuIGFueXRoaW5nICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByZWZsaWdodFNlcnZpY2UuY2hlY2sodGhpcy5lZGl0b3JTdGF0ZS5jdXJyZW50LmlkLCB0aGlzLmdldEN1cnJlbnRDdWx0dXJlKCkpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgICRvbkluaXQoKSB7XHJcbiAgICAgICAgdGhpcy5hY3RpdmVWYXJpYW50ID0gdGhpcy5lZGl0b3JTdGF0ZS5jdXJyZW50LnZhcmlhbnRzLmZpbmQoeCA9PiB4LmFjdGl2ZSk7XHJcbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzVG9UcmFjayA9IFtdO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5hY3RpdmVWYXJpYW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlVmFyaWFudC50YWJzLmZvckVhY2goeCA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BlcnRpZXNUb1RyYWNrID0gdGhpcy5wcm9wZXJ0aWVzVG9UcmFjay5jb25jYXQoeC5wcm9wZXJ0aWVzLm1hcCh4ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy52YWxpZFByb3BUeXBlcy5pbmNsdWRlcyh4LmVkaXRvcikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRvcjogeC5lZGl0b3IsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGlhczogeC5hbGlhcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiB4LmxhYmVsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSkpLmZpbHRlcih4ID0+IHgpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIGFycmF5IHdpbGwgaGF2ZSBsZW5ndGgsIGFzIGFwcCBpcyBvbmx5IHNlbnQgb24gdHlwZXMgd2l0aCB0ZXN0YWJsZSBwcm9wZXJ0aWVzXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BlcnRpZXNUb1RyYWNrLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbml0U2lnbmFsUigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsIu+7v2ltcG9ydCB7IGNvbnN0YW50cyB9IGZyb20gJy4uL2NvbnN0YW50cyc7XHJcblxyXG5leHBvcnQgY2xhc3MgU2V0dGluZ3NDb250cm9sbGVyIHtcclxuXHJcbiAgICBzdGF0aWMgY29udHJvbGxlck5hbWUgPSAncHJlZmxpZ2h0LnNldHRpbmdzLmNvbnRyb2xsZXInO1xyXG5cclxuICAgICRzY29wZTtcclxuICAgICRxO1xyXG4gICAgbGFuZ3VhZ2VSZXNvdXJjZTtcclxuICAgIGxvY2FsaXphdGlvblNlcnZpY2U7XHJcbiAgICBub3RpZmljYXRpb25zU2VydmljZTtcclxuICAgIHByZWZsaWdodFNlcnZpY2U7XHJcblxyXG4gICAgbGFuZ3VhZ2VzID0gW107XHJcbiAgICB0YWJzID0gW107XHJcbiAgICBzZXR0aW5ncyA9IFtdO1xyXG4gICAgY3VycmVudExhbmd1YWdlO1xyXG5cclxuICAgIGxhbmd1YWdlQ2hhbmdlV2F0Y2hlcjtcclxuICAgIHRlc3RhYmxlUHJvcGVydGllc1dhdGNoZXI7XHJcblxyXG4gICAgY29uc3RydWN0b3IoJHNjb3BlLCAkcSwgbm90aWZpY2F0aW9uc1NlcnZpY2UsIGxhbmd1YWdlUmVzb3VyY2UsIGxvY2FsaXphdGlvblNlcnZpY2UsIHByZWZsaWdodFNlcnZpY2UpIHtcclxuICAgICAgICB0aGlzLiRzY29wZSA9ICRzY29wZTtcclxuICAgICAgICB0aGlzLiRxID0gJHE7XHJcblxyXG4gICAgICAgIHRoaXMubm90aWZpY2F0aW9uc1NlcnZpY2UgPSBub3RpZmljYXRpb25zU2VydmljZTtcclxuICAgICAgICB0aGlzLnByZWZsaWdodFNlcnZpY2UgPSBwcmVmbGlnaHRTZXJ2aWNlO1xyXG4gICAgICAgIHRoaXMubGFuZ3VhZ2VSZXNvdXJjZSA9IGxhbmd1YWdlUmVzb3VyY2U7XHJcbiAgICAgICAgdGhpcy5sb2NhbGl6YXRpb25TZXJ2aWNlID0gbG9jYWxpemF0aW9uU2VydmljZTtcclxuXHJcbiAgICAgICAgdGhpcy5sYW5ndWFnZUNoYW5nZVdhdGNoZXIgPSAkc2NvcGUuJHdhdGNoKCgpID0+IHRoaXMuY3VycmVudExhbmd1YWdlLCAobmV3TGFuZywgb2xkTGFuZykgPT4ge1xyXG4gICAgICAgICAgICAvLyB1cGRhdGUgc2V0dGluZ3MgdG8gb25seSBpbmNsdWRlIHRoZSBjdXJyZW50IHZhcmlhbnRcclxuICAgICAgICAgICAgaWYgKG5ld0xhbmcgJiYgbmV3TGFuZyAhPT0gb2xkTGFuZykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy5mb3JFYWNoKHMgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN5bmNTZXR0aW5nID0gdGhpcy5zZXR0aW5nc1N5bmNNb2RlbC5maW5kKHggPT4geC5hbGlhcyA9PT0gcy5hbGlhcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIG1hbmFnZSBvbGQgbGFuZ3VhZ2UgYnkgdXBkYXRpbmcgdGhlIHN5bmMgc2V0dGluZ3MgbW9kZWwsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZW5zdXJpbmcgdGhlIHZhbHVlIGlzIGFuIG9iamVjdFxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvbGRMYW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc3luY1NldHRpbmcudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN5bmNTZXR0aW5nLnZhbHVlID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgc3luY1NldHRpbmcudmFsdWVbb2xkTGFuZ10gPSBzLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZ2V0IHRoZSB2YWx1ZSBmb3IgdGhlIG5ldyBsYW5ndWFnZSBhbmQgdXBkYXRlIHRoZSBzZXR0aW5ncyBtb2RlbFxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzeW5jU2V0dGluZy52YWx1ZSAmJiBzeW5jU2V0dGluZy52YWx1ZVtuZXdMYW5nXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzLnZhbHVlID0gc3luY1NldHRpbmcudmFsdWVbbmV3TGFuZ107XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IHRoZSB2YWx1ZSB0byBhIHNlbnNpYmxlIGRlZmF1bHQgLSBhcnJheSBpZiB0eXBlIGlzIGNoZWNrYm94bGlzdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzLnZhbHVlID0gcy52aWV3LmluY2x1ZGVzKGNvbnN0YW50cy5jaGVja2JveGxpc3QpIHx8IHMudmlldy5pbmNsdWRlcyhjb25zdGFudHMubXVsdGlwbGV0ZXh0Ym94KSA/IFtdIDogbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHdhdGNoVGVzdGFibGVQcm9wZXJ0aWVzID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMudGVzdGFibGVQcm9wZXJ0aWVzV2F0Y2hlciA9IHRoaXMuJHNjb3BlLiR3YXRjaCgoKSA9PiB0aGlzLnNldHRpbmdzLmZpbmQoeCA9PiB4LmFsaWFzID09PSAncHJvcGVydGllc1RvVGVzdCcpLnZhbHVlLCBuZXdWYWwgPT4ge1xyXG4gICAgICAgICAgICBpZiAobmV3VmFsKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcHJvcGVydGllc1RvTW9kaWZ5ID0gdGhpcy5zZXR0aW5ncy5maWx0ZXIoeCA9PiB4LmFsaWFzLmluY2x1ZGVzKCdQcm9wZXJ0aWVzVG9UZXN0JykgJiYgeC5hbGlhcyAhPT0gJ3Byb3BlcnRpZXNUb1Rlc3QnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBwcm9wIG9mIHByb3BlcnRpZXNUb01vZGlmeSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHVzZSB0aGUgcHJvcCBhbGlhcyB0byBmaW5kIHRoZSBjaGVja2JveCBzZXRcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBjaGVja2JveCBvZiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGB1bWItY2hlY2tib3hbbmFtZSo9XCIke3Byb3AuYWxpYXN9XCJdYCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tib3gucXVlcnlTZWxlY3RvcignLnVtYi1mb3JtLWNoZWNrJykuY2xhc3NMaXN0W25ld1ZhbC5pbmRleE9mKGNoZWNrYm94LmdldEF0dHJpYnV0ZSgndmFsdWUnKSkgPT09IC0xID8gJ2FkZCcgOiAncmVtb3ZlJ10oJ3BmLWRpc2FibGVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgdHJ1ZSk7XHJcbiAgICB9O1xyXG5cclxuICAgICRvbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgdGhpcy5sYW5ndWFnZUNoYW5nZVdhdGNoZXIoKTtcclxuICAgICAgICB0aGlzLnRlc3RhYmxlUHJvcGVydGllc1dhdGNoZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICAkb25Jbml0KCkge1xyXG4gICAgICAgIGNvbnN0IHByb21pc2VzID0gW1xyXG4gICAgICAgICAgICB0aGlzLnByZWZsaWdodFNlcnZpY2UuZ2V0U2V0dGluZ3MoKSxcclxuICAgICAgICAgICAgdGhpcy5sYW5ndWFnZVJlc291cmNlLmdldEFsbCgpLFxyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIHRoaXMuJHEuYWxsKHByb21pc2VzKVxyXG4gICAgICAgICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0dGluZ3NTeW5jTW9kZWwgPSByZXNwWzBdLmRhdGEuc2V0dGluZ3M7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldHRpbmdzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLnNldHRpbmdzU3luY01vZGVsKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy50YWJzID0gcmVzcFswXS5kYXRhLnRhYnM7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5sYW5ndWFnZXMgPSByZXNwWzFdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY3VycmVudExhbmd1YWdlID0gdGhpcy5sYW5ndWFnZXMuZmluZCh4ID0+IHguaXNEZWZhdWx0KS5jdWx0dXJlO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0dGluZ3NTeW5jTW9kZWwuZm9yRWFjaCh2ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodi52aWV3LmluY2x1ZGVzKGNvbnN0YW50cy5tdWx0aXBsZXRleHRib3gpICYmIHYudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHYudmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LnZhbHVlW2tleV0gPSB2YWx1ZS5zcGxpdCgnLCcpLm1hcCh2YWwgPT4gKHsgdmFsdWU6IHZhbCB9KSkuc29ydCgoYSwgYikgPT4gYSA8IGIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh2LnZpZXcuaW5jbHVkZXMoY29uc3RhbnRzLmNoZWNrYm94bGlzdCkgJiYgdi52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXModi52YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYudmFsdWVba2V5XSA9IHZhbHVlLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MuZm9yRWFjaCh2ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzeW5jU2V0dGluZyA9IHRoaXMuc2V0dGluZ3NTeW5jTW9kZWwuZmluZCh4ID0+IHguYWxpYXMgPT09IHYuYWxpYXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIHYudmFsdWUgPSBzeW5jU2V0dGluZy52YWx1ZSA/IHN5bmNTZXR0aW5nLnZhbHVlW2N1cnJlbnRMYW5ndWFnZV0gOiBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodi52aWV3LmluY2x1ZGVzKCdzbGlkZXInKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2LmNvbmZpZyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZTogJ3JvdW5kJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRWYWwxOiB2LmFsaWFzID09PSAnbG9uZ1dvcmRTeWxsYWJsZXMnID8gNSA6IDY1LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4VmFsOiB2LmFsaWFzID09PSAnbG9uZ1dvcmRTeWxsYWJsZXMnID8gMTAgOiAxMDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5WYWw6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmllbnRhdGlvbjogJ2hvcml6b250YWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RlcDogMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXA6ICdhbHdheXMnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9vbHRpcFBvc2l0aW9uOiAnYm90dG9tJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHYudmlldy5pbmNsdWRlcyhjb25zdGFudHMubXVsdGlwbGV0ZXh0Ym94KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2LmNvbmZpZyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbjogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heDogMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2LnZhbGlkYXRpb24gPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHYudmlldy5pbmNsdWRlcyhjb25zdGFudHMuY2hlY2tib3hsaXN0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2LmNvbmZpZyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOiB2LnByZXZhbHVlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudExhbmd1YWdlID0gY3VycmVudExhbmd1YWdlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy53YXRjaFRlc3RhYmxlUHJvcGVydGllcygpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFxyXG4gICAgICovXHJcbiAgICBzYXZlU2V0dGluZ3MgPSAoKSA9PiB7XHJcblxyXG4gICAgICAgIC8vIGVuc3VyZSB0aGUgY3VycmVudCBsYW5ndWFnZSBpcyBjb3JyZWN0bHkgbWFwcGVkIHRvIHRoZSBzeW5jIG1vZGVsXHJcbiAgICAgICAgdGhpcy5zZXR0aW5ncy5mb3JFYWNoKHMgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBzeW5jU2V0dGluZyA9IHRoaXMuc2V0dGluZ3NTeW5jTW9kZWwuZmluZCh4ID0+IHguYWxpYXMgPT09IHMuYWxpYXMpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFzeW5jU2V0dGluZy52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgc3luY1NldHRpbmcudmFsdWUgPSB7fTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc3luY1NldHRpbmcudmFsdWVbdGhpcy5jdXJyZW50TGFuZ3VhZ2VdID0gcy52YWx1ZSA/IHMudmFsdWUgOlxyXG4gICAgICAgICAgICAgICAgcy52aWV3LmluY2x1ZGVzKGNvbnN0YW50cy5jaGVja2JveGxpc3QpIHx8IHMudmlldy5pbmNsdWRlcyhjb25zdGFudHMubXVsdGlwbGV0ZXh0Ym94KSA/IFtdIDogbnVsbDsgICAgICAgICAgICBcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gZW5zdXJlIHJlYWRhYmlsaXR5IGlzIHZhbGlkXHJcbiAgICAgICAgbGV0IHZhbGlkUmFuZ2UgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMubGFuZ3VhZ2VzLmZvckVhY2gobCA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGN1bHR1cmUgPSBsLmN1bHR1cmU7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBtaW4gPSBwYXJzZUludCh0aGlzLnNldHRpbmdzU3luY01vZGVsLmZpbmQoeCA9PiB4LmFsaWFzID09PSAncmVhZGFiaWxpdHlUYXJnZXRNaW5pbXVtJykudmFsdWVbY3VsdHVyZV0pO1xyXG4gICAgICAgICAgICBjb25zdCBtYXggPSBwYXJzZUludCh0aGlzLnNldHRpbmdzU3luY01vZGVsLmZpbmQoeCA9PiB4LmFsaWFzID09PSAncmVhZGFiaWxpdHlUYXJnZXRNYXhpbXVtJykudmFsdWVbY3VsdHVyZV0pO1xyXG5cclxuICAgICAgICAgICAgaWYgKG1pbiA+IG1heCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ub3RpZmljYXRpb25zU2VydmljZS5lcnJvcignRVJST1InLFxyXG4gICAgICAgICAgICAgICAgICAgIGBVbmFibGUgdG8gc2F2ZSBzZXR0aW5ncyAtIHJlYWRhYmlsaXR5IG1pbmltdW0gY2Fubm90IGJlIGdyZWF0ZXIgdGhhbiByZWFkYWJpbGl0eSBtYXhpbXVtICgke2wubmFtZX0pYCk7XHJcbiAgICAgICAgICAgICAgICB2YWxpZFJhbmdlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWluICsgMTAgPiBtYXgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubm90aWZpY2F0aW9uc1NlcnZpY2Uud2FybmluZygnV0FSTklORycsIGBSZWFkYWJpbGl0eSByYW5nZSBpcyBuYXJyb3cgKCR7bC5uYW1lfSlgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAodmFsaWRSYW5nZSkge1xyXG4gICAgICAgICAgICAvLyBuZWVkIHRvIHRyYW5zZm9ybSBtdWx0aXRleHRib3ggdmFsdWVzIHdpdGhvdXQgZGlnZXN0XHJcbiAgICAgICAgICAgIC8vIHNvIG11c3QgYmUgYSBuZXcgb2JqZWN0LCBub3QgYSByZWZlcmVuY2VcclxuICAgICAgICAgICAgY29uc3Qgc2V0dGluZ3NUb1NhdmUgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuc2V0dGluZ3NTeW5jTW9kZWwpKTtcclxuXHJcbiAgICAgICAgICAgIHNldHRpbmdzVG9TYXZlLmZvckVhY2godiA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodi52aWV3LmluY2x1ZGVzKGNvbnN0YW50cy5tdWx0aXBsZXRleHRib3gpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHYudmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHYudmFsdWVba2V5XSA9IHZhbHVlLm1hcChvID0+IG8udmFsdWUpLmpvaW4oJywnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHYudmlldy5pbmNsdWRlcyhjb25zdGFudHMuY2hlY2tib3hsaXN0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyh2LnZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2LnZhbHVlW2tleV0gPSB2YWx1ZS5qb2luKCcsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMucHJlZmxpZ2h0U2VydmljZS5zYXZlU2V0dGluZ3Moc2V0dGluZ3NUb1NhdmUsIHRoaXMudGFicylcclxuICAgICAgICAgICAgICAgIC50aGVuKF8gPT4gdGhpcy4kc2NvcGUucHJlZmxpZ2h0U2V0dGluZ3NGb3JtLiRzZXRQcmlzdGluZSgpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCLvu78oKCkgPT4ge1xyXG5cclxuICAgIGNvbnN0IHBvc3RTYXZlVXJsID0gJy91bWJyYWNvYXBpL2NvbnRlbnQvcG9zdHNhdmUnO1xyXG4gICAgbGV0IHByZXNhdmVUZXh0O1xyXG5cclxuICAgIGZ1bmN0aW9uIGludGVyY2VwdG9yKG5vdGlmaWNhdGlvbnNTZXJ2aWNlLCBvdmVybGF5U2VydmljZSwgZWRpdG9yU3RhdGUsICRyb290U2NvcGUsICRxLCAkaW5qZWN0b3IpIHtcclxuXHJcbiAgICAgICAgY29uc3QgY2hlY2tHcm91cCA9ICh1c2VyR3JvdXBPcHRJbk91dCwgY3VsdHVyZSkgPT4ge1xyXG4gICAgICAgICAgICB2YXIgdmFsdWUgPSB1c2VyR3JvdXBPcHRJbk91dC52YWx1ZVtjdWx0dXJlXTtcclxuICAgICAgICAgICAgdmFyIGVuYWJsZWRHcm91cHMgPSB1c2VyR3JvdXBPcHRJbk91dC5wcmV2YWx1ZXMuZmlsdGVyKHggPT4gdmFsdWUuaW5jbHVkZXMoeC52YWx1ZSkpLm1hcCh4ID0+IHgua2V5KTtcclxuXHJcbiAgICAgICAgICAgIGxldCBsb2NhbGl6YXRpb25TZXJ2aWNlO1xyXG4gICAgICAgICAgICAkaW5qZWN0b3IuaW52b2tlKFsnbG9jYWxpemF0aW9uU2VydmljZScsIHNlcnZpY2UgPT4gbG9jYWxpemF0aW9uU2VydmljZSA9IHNlcnZpY2VdKTtcclxuXHJcbiAgICAgICAgICAgICRpbmplY3Rvci5pbnZva2UoWydhdXRoUmVzb3VyY2UnLCBhdXRoUmVzb3VyY2UgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcHJvbWlzZXMgPSBbXHJcbiAgICAgICAgICAgICAgICAgICAgYXV0aFJlc291cmNlLmdldEN1cnJlbnRVc2VyKCksXHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxpemF0aW9uU2VydmljZS5sb2NhbGl6ZSgncHJlZmxpZ2h0X3ByZXNhdmVUZXh0JyksXHJcbiAgICAgICAgICAgICAgICBdO1xyXG5cclxuICAgICAgICAgICAgICAgICRxLmFsbChwcm9taXNlcylcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VycmVudFVzZXIgPSByZXNwWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmVzYXZlVGV4dCA9IHJlc3BbMV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZW5hYmxlZEdyb3Vwcy5zb21lKHggPT4gY3VycmVudFVzZXIudXNlckdyb3Vwcy5pbmNsdWRlcyh4KSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvbnNTZXJ2aWNlLmluZm8oJ1ByZWZsaWdodCcsIHByZXNhdmVUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcmVxdWVzdDogcmVxdWVzdCA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVxdWVzdC51cmwudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhwb3N0U2F2ZVVybCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAkaW5qZWN0b3IuaW52b2tlKFsncHJlZmxpZ2h0U2VydmljZScsIHMgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzLmdldFNldHRpbmdzKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNldHRpbmdzID0gcmVzcC5kYXRhLnNldHRpbmdzO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzZXR0aW5ncyB2YWx1ZXMgYXJlIGEgZGljdGlvbmFyeSBrZXllZCBieSBjdWx0dXJlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFyaWFudHNUb1NhdmUgPSByZXF1ZXN0LmRhdGEudmFsdWUudmFyaWFudHMuZmlsdGVyKHYgPT4gdi5zYXZlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmVmbGlnaHRWYXJzID0gVW1icmFjby5TeXMuU2VydmVyVmFyaWFibGVzLlByZWZsaWdodDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFudHNUb1NhdmUuZm9yRWFjaCh2YXJpYW50ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VsdHVyZSA9IHZhcmlhbnQubGFuZ3VhZ2UgPyB2YXJpYW50Lmxhbmd1YWdlLmN1bHR1cmUgOiBwcmVmbGlnaHRWYXJzLkRlZmF1bHRDdWx0dXJlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBydW5PblNhdmUgPSBzZXR0aW5ncy5maW5kKHggPT4geC5ndWlkID09PSBwcmVmbGlnaHRWYXJzLlNldHRpbmdzR3VpZC5CaW5kU2F2ZUhhbmRsZXIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJ1bk9uU2F2ZSAmJiBydW5PblNhdmUudmFsdWVbY3VsdHVyZV0gPT09ICcxJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdXNlckdyb3VwT3B0SW5PdXQgPSBzZXR0aW5ncy5maW5kKHggPT4geC5ndWlkID09PSBwcmVmbGlnaHRWYXJzLlNldHRpbmdzR3VpZC5Vc2VyR3JvdXBPcHRJbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja0dyb3VwKHVzZXJHcm91cE9wdEluT3V0LCBjdWx0dXJlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiByZXF1ZXN0IHx8ICRxLndoZW4ocmVxdWVzdCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHJlc3BvbnNlOiByZXNwb25zZSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5jb25maWcudXJsLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMocG9zdFNhdmVVcmwpKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IG5vdGlmaWNhdGlvbnNTZXJ2aWNlLmN1cnJlbnQuZmluZEluZGV4KHggPT4geC5tZXNzYWdlID09PSBwcmVzYXZlVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IG5vdGlmaWNhdGlvbnNTZXJ2aWNlLnJlbW92ZShpbmRleCksIDE1MDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5ub3RpZmljYXRpb25zKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgbm90aWZpY2F0aW9uID0gcmVzcG9uc2UuZGF0YS5ub3RpZmljYXRpb25zLmZpbHRlcihmID0+IGYuaGVhZGVyID09PSBVbWJyYWNvLlN5cy5TZXJ2ZXJWYXJpYWJsZXMuUHJlZmxpZ2h0LkNvbnRlbnRGYWlsZWRDaGVja3MpWzBdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub3RpZmljYXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5kYXRhLm5vdGlmaWNhdGlvbnMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcmxheVNlcnZpY2Uub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXc6IGAke1VtYnJhY28uU3lzLlNlcnZlclZhcmlhYmxlcy5QcmVmbGlnaHQuUGx1Z2luUGF0aH0vdmlld3MvZmFpbGVkLm5vdGlmaWNhdGlvbi5odG1sYCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VibWl0QnV0dG9uTGFiZWxLZXk6ICdwcmVmbGlnaHRfcmV2aWV3JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlkZUhlYWRlcjogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZUNhbmNlbGxlZDogbm90aWZpY2F0aW9uLm1lc3NhZ2UuaW5jbHVkZXMoJ19UcnVlJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Ym1pdDogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kZW1pdCgnc2hvd1ByZWZsaWdodCcsIHsgbm9kZUlkOiBlZGl0b3JTdGF0ZS5jdXJyZW50LmlkIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcmxheVNlcnZpY2UuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2U6ICgpID0+IG92ZXJsYXlTZXJ2aWNlLmNsb3NlKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlIHx8ICRxLndoZW4ocmVzcG9uc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBhbmd1bGFyLm1vZHVsZSgncHJlZmxpZ2h0JylcclxuICAgICAgICAuZmFjdG9yeSgncHJlZmxpZ2h0LnNhdmUuaW50ZXJjZXB0b3InLCBbJ25vdGlmaWNhdGlvbnNTZXJ2aWNlJywgJ292ZXJsYXlTZXJ2aWNlJywgJ2VkaXRvclN0YXRlJywgJyRyb290U2NvcGUnLCAnJHEnLCAnJGluamVjdG9yJywgaW50ZXJjZXB0b3JdKVxyXG4gICAgICAgIC5jb25maWcoJGh0dHBQcm92aWRlciA9PiAkaHR0cFByb3ZpZGVyLmludGVyY2VwdG9ycy5wdXNoKCdwcmVmbGlnaHQuc2F2ZS5pbnRlcmNlcHRvcicpKTtcclxuXHJcbn0pKCk7Iiwi77u/aW1wb3J0IHsgTGlua0hlYWx0aFJlc3VsdENvbXBvbmVudCB9IGZyb20gJy4vbGlua2hlYWx0aC9saW5raGVhbHRoLnJlc3VsdC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBSZWFkYWJpbGl0eVBsdWdpbkNvbnRyb2xsZXIgfSBmcm9tICcuL3JlYWRhYmlsaXR5L3JlYWRhYmlsaXR5LnBsdWdpbi5jb250cm9sbGVyJztcclxuXHJcbmV4cG9ydCBjb25zdCBQbHVnaW5zTW9kdWxlID0gYW5ndWxhclxyXG4gICAgLm1vZHVsZSgncHJlZmxpZ2h0LnBsdWdpbnMnLCBbXSlcclxuICAgIC5jb21wb25lbnQoTGlua0hlYWx0aFJlc3VsdENvbXBvbmVudC5uYW1lLCBMaW5rSGVhbHRoUmVzdWx0Q29tcG9uZW50KVxyXG4gICAgLmNvbnRyb2xsZXIoUmVhZGFiaWxpdHlQbHVnaW5Db250cm9sbGVyLmNvbnRyb2xsZXJOYW1lLCBSZWFkYWJpbGl0eVBsdWdpbkNvbnRyb2xsZXIpXHJcbiAgICAubmFtZTsiLCLvu79leHBvcnQgY29uc3QgTGlua0hlYWx0aFJlc3VsdENvbXBvbmVudCA9IHtcclxuICAgIG5hbWU6ICdsaW5rSGVhbHRoUmVzdWx0JyxcclxuICAgIHRyYW5zY2x1ZGU6IHRydWUsXHJcbiAgICBiaW5kaW5nczoge1xyXG4gICAgICAgIHJlc3VsdHM6ICc8J1xyXG4gICAgfSxcclxuICAgIHRlbXBsYXRlOiBgXHJcbiAgICAgICAgPHRhYmxlIGNsYXNzPVwibGlua2hlYWx0aC1yZXN1bHQtdGFibGVcIj5cclxuICAgICAgICAgICAgPHRoZWFkPlxyXG4gICAgICAgICAgICAgICAgPHRyPjx0aD5MaW5rIHRleHQ8L3RoPiA8dGg+TGluayB0YXJnZXQ8L3RoPiA8dGg+TGluayBzdGF0dXM8L3RoPjwvdHI+XHJcbiAgICAgICAgICAgIDwvdGhlYWQ+XHJcbiAgICAgICAgICAgIDx0ciBuZy1yZXBlYXQ9XCJsaW5rIGluICRjdHJsLnJlc3VsdHNcIj48dGQgbmctYmluZD1cImxpbmsudGV4dFwiPjwvdGQ+PHRkIG5nLWJpbmQ9XCJsaW5rLmhyZWZcIj48L3RkPjx0ZCBuZy1iaW5kPVwibGluay5zdGF0dXNcIj48L3RkPjwvdHI+XHJcbiAgICAgICAgPC90YWJsZT5gXHJcbn0iLCLvu79leHBvcnQgY2xhc3MgUmVhZGFiaWxpdHlQbHVnaW5Db250cm9sbGVyIHtcclxuXHJcbiAgICBzdGF0aWMgY29udHJvbGxlck5hbWUgPSAncmVhZGFiaWxpdHkucGx1Z2luLmNvbnRyb2xsZXInO1xyXG5cclxuICAgICRzY29wZTtcclxuICAgIG92ZXJsYXlTZXJ2aWNlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCRzY29wZSwgb3ZlcmxheVNlcnZpY2UpIHtcclxuICAgICAgICB0aGlzLiRzY29wZSA9ICRzY29wZTtcclxuICAgICAgICB0aGlzLm92ZXJsYXlTZXJ2aWNlID0gb3ZlcmxheVNlcnZpY2U7XHJcbiAgICB9XHJcblxyXG4gICAgaGVscCA9ICgpID0+IHtcclxuICAgICAgICBjb25zdCBvdmVybGF5ID0ge1xyXG4gICAgICAgICAgICB2aWV3OiBgJHtVbWJyYWNvLlN5cy5TZXJ2ZXJWYXJpYWJsZXMuUHJlZmxpZ2h0LlBsdWdpblBhdGh9L3BsdWdpbnMvcmVhZGFiaWxpdHkvcmVhZGFiaWxpdHkub3ZlcmxheS5odG1sYCxcclxuICAgICAgICAgICAgdGl0bGU6IHRoaXMuJHNjb3BlLm1vZGVsLm5hbWUsXHJcbiAgICAgICAgICAgIHNpemU6ICdtZWRpdW0nLFxyXG4gICAgICAgICAgICBjb250ZW50OiB0aGlzLiRzY29wZS5tb2RlbC5kZXNjcmlwdGlvbixcclxuICAgICAgICAgICAgY2xvc2U6ICgpID0+IHRoaXMub3ZlcmxheVNlcnZpY2UuY2xvc2UoKSwgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5vdmVybGF5U2VydmljZS5vcGVuKG92ZXJsYXkpO1xyXG4gICAgfTtcclxufVxyXG4iLCLvu79pbXBvcnQgeyBQcmVmbGlnaHRTZXJ2aWNlIH0gZnJvbSAnLi9wcmVmbGlnaHQuc2VydmljZSc7XHJcbmltcG9ydCB7IFByZWZsaWdodEh1YiB9IGZyb20gJy4vcHJlZmxpZ2h0Lmh1Yic7XHJcblxyXG5leHBvcnQgY29uc3QgU2VydmljZXNNb2R1bGUgPSBhbmd1bGFyXHJcbiAgICAubW9kdWxlKCdwcmVmbGlnaHQuc2VydmljZXMnLCBbXSlcclxuICAgIC5zZXJ2aWNlKFByZWZsaWdodFNlcnZpY2Uuc2VydmljZU5hbWUsIFByZWZsaWdodFNlcnZpY2UpXHJcbiAgICAuc2VydmljZShQcmVmbGlnaHRIdWIuc2VydmljZU5hbWUsIFByZWZsaWdodEh1YilcclxuICAgIC5uYW1lOyIsIu+7v2V4cG9ydCBjbGFzcyBQcmVmbGlnaHRIdWIge1xyXG5cclxuICAgIHN0YXRpYyBzZXJ2aWNlTmFtZSA9ICdwcmVmbGlnaHRIdWInO1xyXG5cclxuICAgICRyb290U2NvcGU7XHJcbiAgICAkcTtcclxuICAgIGFzc2V0c1NlcnZpY2U7XHJcblxyXG4gICAgc2NyaXB0cyA9IFtdO1xyXG4gICAgY2FsbGJhY2tzID0gW107XHJcblxyXG4gICAgc3RhcnRpbmcgPSBmYWxzZVxyXG4gICAgcGxhdGZvcm0gPSBVbWJyYWNvLlN5cy5TZXJ2ZXJWYXJpYWJsZXMuUHJlZmxpZ2h0LlBsYXRmb3JtO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCRyb290U2NvcGUsICRxLCBhc3NldHNTZXJ2aWNlKSB7XHJcbiAgICAgICAgdGhpcy4kcm9vdFNjb3BlID0gJHJvb3RTY29wZTtcclxuICAgICAgICB0aGlzLiRxID0gJHE7XHJcbiAgICAgICAgdGhpcy5hc3NldHNTZXJ2aWNlID0gYXNzZXRzU2VydmljZTtcclxuXHJcbiAgICAgICAgY29uc3QgdW1icmFjb1BhdGggPSBVbWJyYWNvLlN5cy5TZXJ2ZXJWYXJpYWJsZXMudW1icmFjb1NldHRpbmdzLnVtYnJhY29QYXRoO1xyXG4gICAgICAgIGlmICh0aGlzLnBsYXRmb3JtID09PSAnQ09SRScpIHtcclxuICAgICAgICAgICAgdGhpcy5zY3JpcHRzID0gW3VtYnJhY29QYXRoICsgJy9saWIvc2lnbmFsci9zaWduYWxyLm1pbi5qcyddO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2NyaXB0cyA9IFtcclxuICAgICAgICAgICAgICAgIHVtYnJhY29QYXRoICsgJy9saWIvc2lnbmFsci9qcXVlcnkuc2lnbmFsci5qcycsXHJcbiAgICAgICAgICAgICAgICB1bWJyYWNvUGF0aCArICcvYmFja29mZmljZS9zaWduYWxyL2h1YnMnXHJcbiAgICAgICAgICAgIF07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNldHVwSHViID0gY2FsbGJhY2sgPT4ge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCBwcm94eTtcclxuICAgICAgICBsZXQgaHViID0ge307XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnBsYXRmb3JtID09PSAnQ09SRScpIHtcclxuICAgICAgICAgICAgJC5jb25uZWN0aW9uID0gbmV3IHNpZ25hbFIuSHViQ29ubmVjdGlvbkJ1aWxkZXIoKVxyXG4gICAgICAgICAgICAgICAgLndpdGhVcmwoVW1icmFjby5TeXMuU2VydmVyVmFyaWFibGVzLlByZWZsaWdodC5zaWduYWxSSHViKVxyXG4gICAgICAgICAgICAgICAgLndpdGhBdXRvbWF0aWNSZWNvbm5lY3QoKVxyXG4gICAgICAgICAgICAgICAgLmNvbmZpZ3VyZUxvZ2dpbmcoc2lnbmFsUi5Mb2dMZXZlbC5XYXJuaW5nKVxyXG4gICAgICAgICAgICAgICAgLmJ1aWxkKCk7XHJcblxyXG4gICAgICAgICAgICBwcm94eSA9ICQuY29ubmVjdGlvbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHByb3h5ID0gJC5jb25uZWN0aW9uLnByZWZsaWdodEh1YjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChwcm94eSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGh1YiA9IHtcclxuICAgICAgICAgICAgICAgIGFjdGl2ZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHN0YXJ0OiBjYWxsYmFjayA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucGxhdGZvcm0gPT09ICdDT1JFJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJveHkuc3RhcnQoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IGNhbGxiYWNrID8gY2FsbGJhY2soKSA6IHt9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaCgoKSA9PiBjb25zb2xlLndhcm4oJ0ZhaWxlZCB0byBzdGFydCBodWInKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignQ291bGQgbm90IHNldHVwIHNpZ25hbFIgY29ubmVjdGlvbicsIGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJC5jb25uZWN0aW9uLmh1Yi5zdGF0ZSAhPT0gJC5jb25uZWN0aW9uLmNvbm5lY3Rpb25TdGF0ZS5kaXNjb25uZWN0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuY29ubmVjdGlvbi5odWIuc3RvcCh0cnVlLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkLmNvbm5lY3Rpb24uaHViLnN0YXJ0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrID8gY2FsbGJhY2soKSA6IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBvbjogKGV2ZW50TmFtZSwgY2FsbGJhY2spID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBwcm94eS5vbihldmVudE5hbWUsIHJlc3VsdCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJHJvb3RTY29wZS4kYXBwbHkoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2socmVzdWx0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaHViID0ge1xyXG4gICAgICAgICAgICAgICAgb246ICgpID0+IHsgfSxcclxuICAgICAgICAgICAgICAgIHN0YXJ0OiAoKSA9PiBjb25zb2xlLndhcm4oJ05vIGh1YiB0byBzdGFydCcpLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gY2FsbGJhY2soaHViKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGdW5jdGlvbiBpcyBjb21tb24gYWNyb3NzIDQ3MiBhbmQgNS4wXHJcbiAgICAgKiAqL1xyXG4gICAgcHJvY2Vzc0NhbGxiYWNrcygpIHtcclxuICAgICAgICB3aGlsZSAodGhpcy5jYWxsYmFja3MubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNiID0gdGhpcy5jYWxsYmFja3MucG9wKCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0dXBIdWIoY2IpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5zdGFydGluZyA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRnVuY3Rpb24gaXMgY29tbW9uIGFjcm9zcyA0NzIgYW5kIDUuMCBcclxuICAgICAqIEBwYXJhbSBjYWxsYmFja1xyXG4gICAgICovXHJcbiAgICBpbml0SHViKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdGhpcy5jYWxsYmFja3MucHVzaChjYWxsYmFjayk7XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5zdGFydGluZykge1xyXG4gICAgICAgICAgICBpZiAoJC5jb25uZWN0aW9uID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnRpbmcgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHByb21pc2VzID0gW107XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNjcmlwdHMuZm9yRWFjaChzY3JpcHQgPT4gcHJvbWlzZXMucHVzaCh0aGlzLmFzc2V0c1NlcnZpY2UubG9hZEpzKHNjcmlwdCkpKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLiRxLmFsbChwcm9taXNlcykudGhlbigoKSA9PiB0aGlzLnByb2Nlc3NDYWxsYmFja3MoKSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnByb2Nlc3NDYWxsYmFja3MoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIu+7v2V4cG9ydCBjbGFzcyBQcmVmbGlnaHRTZXJ2aWNlIHtcclxuXHJcbiAgICBzdGF0aWMgc2VydmljZU5hbWUgPSAncHJlZmxpZ2h0U2VydmljZSc7XHJcblxyXG4gICAgJGh0dHA7XHJcbiAgICB1bWJSZXF1ZXN0SGVscGVyO1xyXG5cclxuICAgIHVybEJhc2UgPSBVbWJyYWNvLlN5cy5TZXJ2ZXJWYXJpYWJsZXMuUHJlZmxpZ2h0LkFwaVBhdGg7XHJcblxyXG4gICAgY29uc3RydWN0b3IoJGh0dHAsIHVtYlJlcXVlc3RIZWxwZXIpIHtcclxuICAgICAgICB0aGlzLiRodHRwID0gJGh0dHA7XHJcbiAgICAgICAgdGhpcy51bWJSZXF1ZXN0SGVscGVyID0gdW1iUmVxdWVzdEhlbHBlcjtcclxuICAgIH1cclxuXHJcbiAgICByZXF1ZXN0ID0gKG1ldGhvZCwgdXJsLCBkYXRhKSA9PlxyXG4gICAgICAgIHRoaXMudW1iUmVxdWVzdEhlbHBlci5yZXNvdXJjZVByb21pc2UoXHJcbiAgICAgICAgICAgIG1ldGhvZCA9PT0gJ0dFVCcgPyB0aGlzLiRodHRwLmdldCh0aGlzLnVybEJhc2UgKyB1cmwpIDogdGhpcy4kaHR0cC5wb3N0KHRoaXMudXJsQmFzZSArIHVybCwgZGF0YSksXHJcbiAgICAgICAgICAgICdTb21ldGhpbmcgYnJva2UnXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICBjaGVjayA9IChpZCwgY3VsdHVyZSkgPT4gdGhpcy5yZXF1ZXN0KCdHRVQnLCBgQ2hlY2svJHtpZH0vJHtjdWx0dXJlfSBgKTtcclxuXHJcbiAgICBjaGVja0RpcnR5ID0gZGF0YSA9PiB0aGlzLnJlcXVlc3QoJ1BPU1QnLCBgQ2hlY2tEaXJ0eWAsIGRhdGEpO1xyXG5cclxuICAgIGdldFNldHRpbmdzID0gKCkgPT4gdGhpcy5yZXF1ZXN0KCdHRVQnLCBgR2V0U2V0dGluZ3NgKTtcclxuXHJcbiAgICBzYXZlU2V0dGluZ3MgPSAoc2V0dGluZ3MsIHRhYnMpID0+IHRoaXMucmVxdWVzdCgnUE9TVCcsIGBTYXZlU2V0dGluZ3NgLCB7XHJcbiAgICAgICAgc2V0dGluZ3MsXHJcbiAgICAgICAgdGFic1xyXG4gICAgfSk7XHJcbn0iXX0="}